[ ******************************************************************************
*****************************************
*********
** builtins.pd: Archivo built-ins de PseudoD
** Declara sistemas esenciales de PseudoD
** PseudoD fue creado por Alejandro Linarez Rangel
** builtins.pseudo fue creado por Alejandro Linarez Rangel
** Puede copiar, redistribuir y modificar este archivo con permiso de
** <proyectopseudod@gmail.com>.
*****************************************
****************************************************************************** ]

[DOCUMENTA
@file Documentación de builtins.pseudo.
Inicializa el interpete de PseudoD, con las constantes y clases requeridas
para que el programa funcione.
DOCUMENTA]

[DOCUMENTA
@brief Representa un valor nulo.
Es el valor que toman las variables, antes de ser inicializadas.
DOCUMENTA]
adquirir NULO
fijar NULO a {nulo}

[DOCUMENTA
@brief Representa el valor de Boole 1 o verdadero.
Es utilizada para sentencias si - si_no. Tambien es devuelto por algunas
funciones para indicar un afirmativo o que el resultado es verdadero,(como
EsNulo).
DOCUMENTA]
adquirir VERDADERO
fijar VERDADERO a {verdadero}

[DOCUMENTA
@brief Representa el valor de Boole 0 o falso.
Es utilizada para sentencias si - si_no. Tambien es devuelto por algunas
funciones para indicar un negativo o que el resultado es falso,(como
EsNulo).
DOCUMENTA]
adquirir FALSO
fijar FALSO a {falso}

[DOCUMENTA
@brief Es el numero 0.
Se inserto por simetria con UNO, DOS, UNON, TRES y CUATRO.
DOCUMENTA]
adquirir CERO [ cero,(0) ]
fijar CERO a {0}

[DOCUMENTA
@brief Es el numero 1.
Es utilizado para incrementar, decrementar, entre otros.
DOCUMENTA]
adquirir UNO [ uno,(1) ]
fijar UNO a {1}

[DOCUMENTA
@brief Es el numero -1.
Es utilizado para incrementar, decrementar entre otros.
DOCUMENTA]
adquirir UNON [ menos uno,(-1) ]
fijar UNON a {-1}

[DOCUMENTA
@brief Es el numero 2.
Es comunmente utilizado para calcular mitades, dobles.
DOCUMENTA]
adquirir DOS [ Para mitades ]
fijar DOS a {2}

[DOCUMENTA
@brief Es el numero 3.
Tal como el DOS, el TRES es utilizado para tercios y triples.
DOCUMENTA]
adquirir TRES [ Para tercios ]
fijar TRES a {3}

[DOCUMENTA
@brief Es el numero 5.
Utilizado para calcular quintas partes, y quintuples.
DOCUMENTA]
adquirir CINCO [ Para x/5 ]
fijar CINCO a {5}

[DOCUMENTA
@brief Version de PseudoD actualmente estandar.
Es la version de PseudoD actualmente estandar.
DOCUMENTA]
adquirir PSEUDOD [ version de PseudoD ]
fijar PSEUDOD a {2.2.0}

[DOCUMENTA
@brief Ruta donde PseudoD busca los archivos de BEPD.
Es mutable, si se cambia PseudoD buscara las bibliotecas en el lugar
especificado.
DOCUMENTA]
puntero RUTA_BEPD __LIB__

[DOCUMENTA
@brief Es la clase base de PseudoD.
Define atributos basicos, que PseudoD utiliza. Dado esto,
se recomienda que todas las clases hereden a esta para evitar errores.
DOCUMENTA]
clase Objeto
	NOMBRE
	Tipo
#(Final).
[ No hereda ]

[DOCUMENTA
@brief Es la clase principal de instancias.
Cada instancia creada con adquirir es una instancia de esta.
DOCUMENTA]
clase PseudoVariable
#(Final).
heredar Objeto PseudoVariable

[DOCUMENTA
@brief Es la clase donde se almacenan las funciones.
Cada funcion declarada, se almacena en un objeto de esta clase.
DOCUMENTA]
clase PseudoFuncion
	;cod
#(Final).
heredar Objeto PseudoFuncion

[DOCUMENTA
@brief Es un puntero, mejor que los declarados con <code class="pseudod">puntero</code>.
Es adem&aacute;s orientado a objetos y permite acceder de forma m&aacute;s eficiente
a la memoria apuntada.
DOCUMENTA]
clase PunteroInteligente
	;direccion
	:apuntar
	:esNulo
#(Final).
heredar Objeto PunteroInteligente

[DOCUMENTA
@brief Redirecciona el puntero a otro objeto.
@arg yo
@arg Variable Referencia comun a la nueva variable a ser apuntada.
@errors Active
DOCUMENTA]
funcion PunteroInteligente#apuntar [ Yo, Variable ]
	adquirir yo
	adquirir otro
	adquirir sentencia
	recibir_resultado yo
	recibir_resultado otro
	fijar sentencia a {#direccion}
	Importar.Cad.Concatenar yo sentencia yo
	fijar sentencia a {redireccionar }
	Importar.Cad.Concatenar sentencia yo sentencia
	Importar.Cad.Concatenar sentencia ESP sentencia
	Importar.Cad.Concatenar sentencia otro sentencia
	ejecutar sentencia
	liberar sentencia
	liberar yo
	liberar otro
finfun

[DOCUMENTA
@brief Determina si el puntero es nulo.
@arg Yo Referencia comun al puntero a redireccionar(PseudoD la pasa automaticamente)
@dev VERDADERO si el puntero es nulo y FALSO de lo contrario.
@errors Active
DOCUMENTA]
funcion PunteroInteligente#esNulo [ Yo -> esNulo ]
	adquirir yo
	adquirir otro
	adquirir sentencia
	recibir_resultado yo
	fijar sentencia a {#direccion}
	Importar.Cad.Concatenar yo sentencia yo
	fijar sentencia a {fijar otro =¿? }
	Importar.Cad.Concatenar sentencia yo sentencia
	ejecutar sentencia
	devolver FALSO
	si son iguales otro y NULO#NOMBRE
		sacar sentencia
		devolver VERDADERO
	fin
	liberar sentencia
	liberar yo
	liberar otro
finfun

adquirir ___codigo_pseudod_buffer_interno___
puntero # ___codigo_pseudod_buffer_interno___

crear_pila
usar_pila 0
empujar NULO

utilizar inic.pseudo
utilizar errores.pseudo
