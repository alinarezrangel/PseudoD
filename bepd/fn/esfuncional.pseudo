[ ******************************************************************************
*****************************************
*********
** Bibliotecas de Funciones de Utilidad: subconjunto de la BEPD.
** Operaciones de E/S basadas en procedimientos en vez de clases.
*********
*****************************************
********************************************************************************
Copyright 2016 Alejandro Linarez Rangel

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
********************************************************************************
****************************************************************************** ]

[DOCUMENTA
@brief `Escribir` - Escribe un texto en la salida estándar.
Equivalente a `escribir`

@arg texto Valor a escribir.

@races None
DOCUMENTA]
funcion Escribir de texto
	escribir texto
finfun

[DOCUMENTA
@brief `EscribirLinea` - Casi identico a <Escribir>.
La diferencia esta en que ingresa un valor nueva linea al final, como
en `escribir` seguido de `nl`

@arg texto Valor a escribir.

@races None
DOCUMENTA]
funcion EscribirLinea de texto
	escribir texto
	nl
finfun

[DOCUMENTA
@brief `LeerPalabra` - Lee un valor desde la entrada estandar, y lo retorna.

@dev El valor leido.

@races None
DOCUMENTA]
funcion LeerPalabra
	adquirir valor
	leer valor
	devolver valor
	liberar valor
finfun

[DOCUMENTA
@brief `DatosDeSalida` - Representa una configuracion de salida.
Donde:

 * `MARCA`: Es el comodin para el reemplazo.
 * `SPEC`: Es el comodin para el caracter especial.
 * `NLINE`: Es el comodin para el nueva linea (junto con `SPEC`).
 * `NLINER`: Es el comodin para el retorno de carro (junto con `SPEC`).
 * `NLINERR`: Es el comodin para el nueva linea del sistema (junto con `SPEC`).
 * `NRESOLV`: Es el comodin para resolver un argumento (junto con `SPEC`)
DOCUMENTA]
clase DatosDeSalida hereda Objeto
	atributo MARCA
	atributo SPEC
	atributo NLINE
	atributo NLINER
	atributo NLINERR
	atributo NRESOLV
	atributo CV
	atributo NL
	atributo RC
finclase

[DOCUMENTA
@brief `DATOS_DE_IMPRIMIR` - Es la configuracion predeterminada del sistema de E/S.
Donde:

 * **MARCA** es `%`.
 * **SPEC** es `\`.
 * **NLINE** es `n`.
 * **NLINER** es `r`.
 * **NLINERR** es `k`.
 * **NRESOLV** es `<`.
DOCUMENTA]
instancia DatosDeSalida DATOS_DE_IMPRIMIR

fijar DATOS_DE_IMPRIMIR#MARCA a {%}
fijar DATOS_DE_IMPRIMIR#SPEC a {\}
fijar DATOS_DE_IMPRIMIR#NLINE a {n}
fijar DATOS_DE_IMPRIMIR#NLINER a {r}
fijar DATOS_DE_IMPRIMIR#NLINERR a {k}
fijar DATOS_DE_IMPRIMIR#NRESOLV a {<}
empujar VG_BUFFER
fijar VG_BUFFER a {CV}
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#CV
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#NL
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#RC
fijar VG_BUFFER a {NL}
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#NL
fijar VG_BUFFER a {RC}
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#RC
sacar VG_BUFFER

[DOCUMENTA
@brief `Imprimir` - Imprime una lista de argumentos.
Los separa por espacios.

@arg str Primer argumento a imprimir (obligatorio).
@arg args... Lista de argumentos terminada en <builtins.pseudo#NULO>.

@races Stack.Underflow
Si la lista de argumentos no termina en <builtins.pseudo#NULO>, se bloqueara y
terminara con un *stack underflow*.
DOCUMENTA]
funcion Imprimir de inicio [ ... NULO ]
	adquirir argumento
	sacar argumento
	escribir inicio
	mientras sean diferentes argumento y NULO
		escribir_esp
		escribir argumento
		sacar argumento
	finbucle
	empujar NULO
	liberar argumento
finfun

[DOCUMENTA
@brief `ImprimirLinea` - Casi equivalente a <Imprimir>.
Solo que agrega un `nl` al final.

@arg str Primer argumento a imprimir (obligatorio).
@arg args... Lista de argumentos terminada en <builtins.pseudo#NULO>.

@races Stack.Underflow
Si la lista de argumentos no termina en <builtins.pseudo#NULO>, se bloqueara y
terminara con un *stack underflow*.
DOCUMENTA]
funcion ImprimirLinea de inicio [ ... NULO ]
	adquirir argumento
	sacar argumento
	escribir inicio
	mientras sean diferentes argumento y NULO
		escribir_esp
		escribir argumento
		sacar argumento
	finbucle
	nl
	empujar NULO
	liberar argumento
finfun

[DOCUMENTA
@brief `ImprimirFormato` - Equivalente en PseudoD a printf.
El formateo se realiza de la siguiente forma:

Si se encuentra un comodin de reemplazo (por defecto `%`) se saca un argumento
y se imprime, si encambio, se encuentra un comodin de caracter especial,
se formatea el siguiente caracter y se imprime.

Es decir, lo que en C es `"Hola\r\nMundo %s"` aqui es `"Hola\r\n Mundo %"`.
Si se desea imprimir un caracter `%`, basta con agregar un \ atras:
`"\%"` = `"%"`. En caso de que se requiera el nuevalinea del sistema, utilize
`\k`. `"\k"` = `std::endl`.

A diferencia de C printf, este no requiere especificación del tipo, solo el
comodin. En total, lo formatos aceptados son: `\r` = Retorno de carro, `\n` =
Nueva linea, `\k` = Nueva linea del sistema, `%` = Argumento, `\<` = Argumento
resuelto. Para escapar `\` use `\\`.

También puedes *resolver un argumento*. Esto se hace con `\<`. Es muy similar a
`%` pero en vez de simplemente recibir un argumento, lo pasa por la resolución
de nombres: `ImprimirFormato {\<} {hola}` imprime el contenido de la variable
`hola`. Es igual a simplemente pasar `%` pasando el argumento entre `<>`:
`ImprimirFormato {\<} VAR` es igual a `ImprimirFormato {%} <VAR>`.

@arg str Cadena a formatear
@arg args... Lista de argumentos, no se verifica su tamaño.

@races Stack.Underflow
Si se especifica un comodin de caracter especial en el final de la cadena,
o se especifica un comodin de reemplazo y falta el argumento, causara un
*stack underflow*.
DOCUMENTA]
funcion ImprimirFormato [ str args... ]
	adquirir cadena
	adquirir caracter
	adquirir ind
	adquirir tam
	recibir_parametro cadena
	fijar ind a {0}
	Importar.Cad.Tamaño cadena tam
	mientras comparar Importar.Ent.Comparar ind < tam
		fijar caracter a DATOS_DE_IMPRIMIR#CV
		Importar.Cad.Caracter ind cadena caracter
		si son iguales caracter y DATOS_DE_IMPRIMIR#MARCA
			recibir_parametro caracter
		sino
			si son iguales caracter y DATOS_DE_IMPRIMIR#SPEC
				Importar.Ent.Sumar ind UNO ind
				fijar caracter a DATOS_DE_IMPRIMIR#CV
				Importar.Cad.Caracter ind cadena caracter
				si son iguales caracter y DATOS_DE_IMPRIMIR#NLINE
					fijar caracter a DATOS_DE_IMPRIMIR#NL
				fin
				si son iguales caracter y DATOS_DE_IMPRIMIR#NLINER
					fijar caracter a DATOS_DE_IMPRIMIR#RC
				fin
				si son iguales caracter y DATOS_DE_IMPRIMIR#NLINERR
					fijar caracter a DATOS_DE_IMPRIMIR#CV
					nl
				fin
				si son iguales caracter y DATOS_DE_IMPRIMIR#NRESOLV
					recibir_parametro caracter
					fijar caracter a <caracter>
				fin
				escribir caracter
				fijar caracter a DATOS_DE_IMPRIMIR#CV
			fin
		fin
		escribir caracter
		Importar.Ent.Sumar ind UNO ind
	finbucle
	liberar cadena
	liberar caracter
	liberar ind
	liberar tam
finfun
