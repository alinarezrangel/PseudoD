[ ******************************************************************************
*****************************************
*********
** clases.pseudo: Archivo clases estandares de PseudoD de PseudoD
** Declara la jerarquía de clases estandar.
** PseudoD fue creado por Alejandro Linarez Rangel
** clases.pseudo fue creado por Alejandro Linarez Rangel
** Puede copiar, redistribuir y modificar este archivo con permiso de
** <proyectopseudod@gmail.com>.
*****************************************
****************************************************************************** ]

utilizar mate.pseudo

[DOCUMENTA
@file Documentación de clases.pseudo.
Aqui se declaran clases comúnes, como <Fraccion> y <Decimal>.
DOCUMENTA]

[DOCUMENTA
@brief Representa un objeto al cual se le pueden aplicar operaciones aritméticas.

@abstract
DOCUMENTA]
clase ElementoMatematico hereda Objeto
	:sumar
	:restar
	:multiplicar
	:dividir
finclase

[DOCUMENTA
@brief Suma dos elementos (res = yo + tu)
@argyo
@arg tu Segundo elemento a aplicar (referencia común).
@arg res Elemento donde se almacenará el resultado (referencia común).
@races None
DOCUMENTA]
funcion ElementoMatematico#sumar
finfun
[DOCUMENTA
@brief Resta dos elementos (res = yo - tu)
@argyo
@arg tu Segundo elemento a aplicar (referencia común).
@arg res Elemento donde se almacenará el resultado (referencia común).
@races None
DOCUMENTA]
funcion ElementoMatematico#restar
finfun
[DOCUMENTA
@brief Multiplica dos elementos (res = yo * tu)
@argyo
@arg tu Segundo elemento a aplicar (referencia común).
@arg res Elemento donde se almacenará el resultado (referencia común).
@races None
DOCUMENTA]
funcion ElementoMatematico#multiplicar
finfun
[DOCUMENTA
@brief Divide dos elementos (res = yo / tu)
@argyo
@arg tu Segundo elemento a aplicar (referencia común).
@arg res Elemento donde se almacenará el resultado (referencia común).
@races None
DOCUMENTA]
funcion ElementoMatematico#dividir
finfun

[DOCUMENTA
@brief Representa un numero en el conjunto `Q`, en forma de fracción.
A diferencia de <Decimal>, este utiliza una representacion en forma de fracción
y no una representacion decimal.
DOCUMENTA]
clase Fraccion hereda ElementoMatematico
	numerador
	denominador
	:sumar
	:restar
	:multiplicar
	:dividir
finclase

[ Fraccion#a. Yo#NOMBRE. Tu#NOMBRE. ]

[DOCUMENTA
@brief Suma dos fracciones.
Aplica la forma de `a/b + c/d = (ad + bc)/bd`.
Almacena el resultado en el argumento res.
@argyo
@arg Tu Referencia al segundo elemento de la suma.
@arg res tercer argumento, una referencia común a donde se guardara el resultado.
@races None
DOCUMENTA]
funcion Fraccion#sumar [ Yo, Tu ]
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#numerador a llamar Sumar
		llamar Multiplicar <yo>#numerador <tu>#denominador finargs
		llamar Multiplicar <yo>#denominador <tu>#numerador finargs
	finargs
	fijar <res>#denominador a llamar Multiplicar
		<yo>#denominador <tu>#denominador
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Resta dos fracciones.
Aplica la forma de `a/b - c/d = (ad - bc)/bd`.
Almacena el resultado en el argumento res.
@argyo
@arg Tu Referencia al segundo elemento de la suma.
@arg res tercer argumento, una referencia a donde se guardara el resultado.
@races None
DOCUMENTA]
funcion Fraccion#restar [ Yo, Tu ]
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#numerador a llamar Restar
		llamar Multiplicar <yo>#numerador <tu>#denominador finargs
		llamar Multiplicar <yo>#denominador <tu>#numerador finargs
	finargs
	fijar <res>#denominador a llamar Multiplicar
		<yo>#denominador <tu>#denominador
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Multiplica dos fracciones.
Aplica la forma de `a/b * c/d = ac/bd`.
Almacena el resultado en el argumento res.
@argyo
@arg Tu Referencia al segundo elemento de la suma.
@arg res tercer argumento, una referencia a donde se guardara el resultado.
@races None
DOCUMENTA]
funcion Fraccion#multiplicar [ Yo, Tu ]
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#numerador a llamar Multiplicar
		<yo>#numerador <tu>#numerador
	finargs
	fijar <res>#denominador a llamar Multiplicar
		<yo>#denominador <tu>#denominador
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Divide dos fracciones.
Aplica la forma de `a/b * c/d = ad/bc`.
Almacena el resultado en el argumento res.
@argyo
@arg Tu Referencia al segundo elemento de la suma.
@arg res tercer argumento, una referencia a donde se guardara el resultado.
@races None
DOCUMENTA]
funcion Fraccion#dividir [ Yo, Tu ]
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#numerador a llamar Multiplicar
		<yo>#numerador <tu>#denominador
	finargs
	fijar <res>#denominador a llamar Multiplicar
		<yo>#denominador <tu>#numerador
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Representa un valor de Boole.
Esta clase puede tener dos valores, verdadero y falso.
No hay atributos donde almacenar los valores, se acceden cual si
fueran PseudoVariables.

@obsolete
DOCUMENTA]
clase Boole hereda Objeto
	:Y
	:O
	:NO
	:O-EXCLUSIVO
#(Final).

[DOCUMENTA
@brief Operacion Y entre dos valores de Boole.
Devuelve verdadero si a y b son verdadero.
@arg Yo Referencia comun al valor numero 1 a comparar.
@arg b Referencia comun al valor numero 2 a comparar.
@dev Verdadero o Falso.
@errors Active
DOCUMENTA]
funcion Boole#Y
	adquirir yo
	adquirir tu
	recibir_parametro yo
	recibir_parametro tu
	si <yo>
		si <tu>
			devolver VERDADERO
		sino
			devolver FALSO
		fin
	sino
		devolver FALSO
	fin
	liberar yo
	liberar tu
finfun

[DOCUMENTA
@brief Operacion O entre dos valores de Boole.
Devuelve verdadero si a es verdadero, b es verdadero, o ambos son verdadero.
@arg Yo Referencia al valor numero 1 a comparar.
@arg b Referencia al valor numero 2 a comparar.
@dev Verdadero o Falso.
@errors Active
DOCUMENTA]
funcion Boole#O
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	si <yo>
		fijar res a VERDADERO
	fin
	si <tu>
		fijar res a VERDADERO
	fin
	devolver res
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Operacion O-EXCLUSIVO entre dos valores de Boole.
Devuelve verdadero si a y b son distintos.
@arg Yo Referencia al valor numero 1 a comparar.
@arg b Referencia al valor numero 2 a comparar.
@dev Verdadero o Falso.
@errors Active
DOCUMENTA]
funcion Boole#O-EXCLUSIVO
	adquirir yo
	adquirir tu
	recibir_parametro yo
	recibir_parametro tu
	si son diferentes <yo> y <tu>
		devolver VERDADERO
	sino
		devolver FALSO
	fin
	liberar yo
	liberar tu
finfun

[DOCUMENTA
@brief Operacion NO de un valor de Boole.
Devuelve verdadero si a es falso, y falso si a es verdadero.
@arg Yo Referencia al valor a negar.
@dev Verdadero o Falso.
@errors Active
DOCUMENTA]
funcion Boole#NO
	adquirir yo
	recibir_parametro yo
	si <yo>
		devolver FALSO
	sino
		devolver VERDADERO
	fin
	liberar yo
finfun

[DOCUMENTA
@brief Representa un numero en `Z`.
Para un numero en `Q`, se pueden utilizar las clases <Fraccion>
y <Decimal>.

El valor se almacena en el campo valor, como en Decimal.
DOCUMENTA]
clase Numero hereda ElementoMatematico
	valor
	:sumar
	:restar
	:multiplicar
	:dividir
finclase

[DOCUMENTA
@brief Suma dos Numeros.
@argyo
@arg b Referencia a el segundo numero a sumar.
@arg res Referencia a donde se almacenara el resultado.
@races None
DOCUMENTA]
funcion Numero#sumar
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#valor a llamar Sumar
		<yo>#valor <tu>#valor
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Resta dos Numeros.
@argyo
@arg b Referencia a el segundo numero a restar.
@arg res Referencia a donde se almacenara el resultado.
@races None
DOCUMENTA]
funcion Numero#restar
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#valor a llamar Restar
		<yo>#valor <tu>#valor
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Multiplica dos Numeros.
@argyo
@arg b Referencia a el segundo numero a multiplicar.
@arg res Referencia a donde se almacenara el resultado.
@races None
DOCUMENTA]
funcion Numero#multiplicar
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#valor a llamar Multiplicar
		<yo>#valor <tu>#valor
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Divide dos Numeros.
@argyo
@arg b Referencia a el segundo numero a dividir.
@arg res Referencia a donde se almacenara el resultado.
@races None
DOCUMENTA]
funcion Numero#dividir
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#valor a llamar Dividir
		<yo>#valor <tu>#valor
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Representa un numero en `Q`.
Para numeros en `Z`, u otra representacion de numeros en `Q`, se pueden ver:

 * <Numero> para representaciones en `Z`.
 * <Fraccion> para representaciones en `Q`.
DOCUMENTA]
clase Decimal hereda ElementoMatematico
	valor
	:sumar
	:restar
	:multiplicar
	:dividir
finclase

[DOCUMENTA
@brief Suma dos Numeros Decimales.
@argyo
@arg b Referencia a el segundo numero a sumar.
@arg res Referencia a donde se almacenara el resultado.
@races None
DOCUMENTA]
funcion Decimal#sumar
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#valor a llamar Sumar
		<yo>#valor <tu>#valor
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Resta dos Numeros Decimales.
@argyo
@arg b Referencia a el segundo numero a restar.
@arg res Referencia a donde se almacenara el resultado.
@races None
DOCUMENTA]
funcion Decimal#restar
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#valor a llamar Restar
		<yo>#valor <tu>#valor
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Multiplica dos Numeros Decimales.
@argyo
@arg b Referencia a el segundo numero a multiplicar.
@arg res Referencia a donde se almacenara el resultado.
@races None
DOCUMENTA]
funcion Decimal#multiplicar
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#valor a llamar Multiplicar
		<yo>#valor <tu>#valor
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Divide dos Numeros decimales.
@argyo
@arg b Referencia a el segundo numero a dividir.
@arg res Referencia a donde se almacenara el resultado.
@races None
DOCUMENTA]
funcion Decimal#dividir
	adquirir yo
	adquirir tu
	adquirir res
	recibir_parametro yo
	recibir_parametro tu
	recibir_parametro res
	fijar <res>#valor a llamar Dividir
		<yo>#valor <tu>#valor
	finargs
	liberar yo
	liberar tu
	liberar res
finfun

[DOCUMENTA
@brief Representa un par de valores.
Posee un primero (primer valor o clave) y un segundo (segundo valor o valor).
DOCUMENTA]
clase Par hereda Objeto
	primero
	segundo
finclase
