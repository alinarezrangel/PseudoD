[ ******************************************************************************
*****************************************
*********
** clases.pseudo: Archivo clases estandares de PseudoD de PseudoD
** Declara la jerarquía de clases estandar.
** PseudoD fue creado por Alejandro Linarez Rangel
** clases.pseudo fue creado por Alejandro Linarez Rangel
** Puede copiar, redistribuir y modificar este archivo con permiso de
** <proyectopseudod@gmail.com>.
*****************************************
****************************************************************************** ]

[DOCUMENTA
@brief Representa informacion sobre el programa.
Es utilizado por plug-ins para obtener distintos datos.
DOCUMENTA]
clase Programa
	Nombre
	Proveedor
	Main
	DirLib
	;BEPD
#(Final).
heredar Objeto Programa

[DOCUMENTA
@brief Intancia de Programa.
Esta instancia es la que representa el programa.
DOCUMENTA]
instancia Programa yo
operador yo#Nombre. =¿? __MAIN__
operador yo#Main. =¿? __MAIN__
operador yo#DirLib. =¿? __LIB__
redireccionar yo#BEPD. yo#DirLib.

[DOCUMENTA
@brief 
DOCUMENTA]

[DOCUMENTA
@brief Representa un numero en el conjunto Q, en forma de fraccion.
A diferencia de Decimal, este utiliza una representacion en forma de fraccion
y no una representacion decimal.
DOCUMENTA]
clase Fraccion
	numerador
	denominador
	:sumar
	:restar
	:multiplicar
	:dividir
#(Final).
heredar Objeto Fraccion

[ Fraccion#a. Yo#NOMBRE. Tu#NOMBRE. ]

[DOCUMENTA
@brief Suma dos fracciones.
Aplica la forma de a/b + c/d = (ad + bc)/bd.
Almacena el resultado en el argumento Yo.
@arg Yo primer elemento, debe ser una <a href="ref_referencias.html">referencia</a>.
@arg Tu segundo elemento, debe ser una <a href="ref_referencias.html">referencia</a>.
@arg res tercer argumento, una <a href="ref_referencias.html">referencia</a> a donde se guardara el resultado.
DOCUMENTA]
funcion Fraccion#sumar. [ Yo, Tu ]
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	adquirir __BUFFER_RA__
	adquirir __BUFFER_RB__
	adquirir __BUFFER_RC__
	sacar __REF_YO__ [ sacamos las referencias ]
	sacar __REF_TU__
	sacar __REF_RES__
	empujar __REF_TU__ [ guardamos las referencias YO y TU para usos posteriores ]
	empujar __REF_YO__
	[ fijamos los buffers a los atributos que queremos obtener ]
	operador __BUFFER_A__ =* #numerador.
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	[ al concatenar la referencia con el atributo, lo podemos fijar y obtener ]
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	[ Fijamos otro buffer a la accion a realizar con las referencias ]
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	[ Ya le concatenamos un espacio, al concatenar la referencia, (su atributo)
	podemos fijarla ]
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	[ Almacenamos el resultado en        __BUFFER_RA__ ]
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RA__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__ [ ejecutamos la sentencia Multiplicar ]
	[ Ya ejecutamos de a/b + c/d la parte ad, ad esta en __BUFFER_RA__ ]
	[ las referencias les agregamos los atributos antes, pero ahora necesitamos
	otro atributos, asi que sacamos las referencias que guardamos anteriormente ]
	sacar __REF_YO__
	sacar __REF_TU__
	empujar __REF_TU__ [ las volvemos a guardar ]
	empujar __REF_YO__
	[ accedemos a los atributos ]
	operador __BUFFER_A__ =* #denominador.
	operador __BUFFER_B__ =* #numerador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	[ Tambien multiplicamos ]
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	[ pero almacenamos en __BUFFER_RB__ ]
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RB__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__ [ ejecutamos la otra multiplicacion ]
	[ Ya tenemos la parte de a/b + c/d, bc l cual esta en __BUFFER_RB__ ]
	sacar __REF_YO__ [ sacamos las referencias guardadas ]
	sacar __REF_TU__
	empujar __REF_TU__ [ guardamos las referencias para el ultimo paso ]
	empujar __REF_YO__
	[ accedemos a los atributos ]
	operador __BUFFER_A__ =* #denominador.
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	[ Multiplicamos ]
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	[ Y almacenamos en __BUFFER_RC__ ]
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RC__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__ [ ejecutamos... ]
	[ Ya tenemos la parte de a/b + c/d, bd en __BUFFER_RC__ ]
	[ Sumamos ad y bc ]
	Importar.Ent.Sumar __BUFFER_RA__ __BUFFER_RB__ __BUFFER_RA__
	sacar __REF_YO__
	sacar __REF_TU__ [ sacamos las referencias para el ultimo paso ]
	[ Ahora vamos a fijar los valores a __REF_RES__ ]
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* #numerador.
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_RES__ __BUFFER_A__
	[ Primero el numerador ]
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	[ lo fijamos a... ]
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	[ La suma de ad y bc ]
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RA__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__ [ ejecutamos ]
	[ Ahora fijaremos el denominador a bd ]
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_RES__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	[ recordar que __BUFFER_RC__ es el resultado de multiplicar bd ]
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RC__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__ [ ejecutamos ]
	liberar __REF_YO__ [ y liberamos memoria ]
	liberar __REF_TU__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
	liberar __BUFFER_RA__
	liberar __BUFFER_RB__
	liberar __BUFFER_RC__
	liberar __REF_RES__
finfun

[DOCUMENTA
@brief Resta dos fracciones.
Aplica la forma de a/b - c/d = (ad - bc)/bd.
Almacena el resultado en el argumento Yo.
@arg Yo primer elemento, debe ser una <a href="ref_referencias.html">referencia</a>.
@arg Tu segundo elemento, debe ser una <a href="ref_referencias.html">referencia</a>.
@arg res tercer argumento, una <a href="ref_referencias.html">referencia</a> a donde se guardara el resultado.
DOCUMENTA]
funcion Fraccion#restar. [ Yo, Tu ]
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	adquirir __BUFFER_RA__
	[ TODO: identico a Fraccion#sumar., solo que resta en una parte ]
	adquirir __BUFFER_RB__
	adquirir __BUFFER_RC__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	empujar __REF_TU__
	empujar __REF_YO__
	operador __BUFFER_A__ =* #numerador.
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RA__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	sacar __REF_YO__
	sacar __REF_TU__
	empujar __REF_TU__
	empujar __REF_YO__
	operador __BUFFER_A__ =* #denominador.
	operador __BUFFER_B__ =* #numerador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RB__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	sacar __REF_YO__
	sacar __REF_TU__
	empujar __REF_TU__
	empujar __REF_YO__
	operador __BUFFER_A__ =* #denominador.
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RC__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	[ Aqui se resta, no se suma ]
	Importar.Ent.Restar __BUFFER_RA__ __BUFFER_RB__ __BUFFER_RA__
	sacar __REF_YO__
	sacar __REF_TU__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* #numerador.
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_RES__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RA__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_RES__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RC__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
	liberar __BUFFER_RA__
	liberar __BUFFER_RB__
	liberar __BUFFER_RC__
	liberar __REF_RES__
finfun

[DOCUMENTA
@brief Multiplica dos fracciones.
Aplica la forma de a/b * c/d = ac/bd.
Almacena el resultado en el argumento Yo.
@arg Yo primer elemento, debe ser una <a href="ref_referencias.html">referencia</a>.
@arg Tu segundo elemento, debe ser una <a href="ref_referencias.html">referencia</a>.
@arg res tercer argumento, una <a href="ref_referencias.html">referencia</a> a donde se guardara el resultado.
DOCUMENTA]
funcion Fraccion#multiplicar. [ Yo, Tu ]
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	adquirir __BUFFER_RA__
	adquirir __BUFFER_RB__
	adquirir __BUFFER_RC__
	sacar __REF_YO__
	sacar __REF_TU__ [ sacamos las referencias ]
	sacar __REF_RES__
	empujar __REF_TU__ [ las guardamos para otras acciones ]
	empujar __REF_YO__
	[ Como vamos a multiplicar numerador por numerador,
	  accedemos a esos atributos ]
	operador __BUFFER_A__ =* #numerador.
	operador __BUFFER_B__ =* #numerador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	[ Vamos a multiplicar ]
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	[ almacenamos en __BUFFER_RA__ ]
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RA__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	sacar __REF_YO__ [ sacamos las referencias de nuevo ]
	sacar __REF_TU__
	empujar __REF_TU__ [ y las guardamos ]
	empujar __REF_YO__
	[ multiplicamos denominador por denominador ]
	operador __BUFFER_A__ =* #denominador.
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	[ y almacenamos en __BUFFER_RB__ ]
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RB__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__ [ ejecutamos ]
	sacar __REF_YO__ [ sacamos las referencias ]
	sacar __REF_TU__
	[ fijamos el resultado ]
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* #numerador.
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_RES__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	[ primero el numerador ]
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RA__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__ [ ejecutamos ]
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_RES__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	[ Despues el denominador ]
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RB__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__ [ Ejecutamos ]
	liberar __REF_YO__ [ y liberamos memoria ]
	liberar __REF_TU__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
	liberar __BUFFER_RA__
	liberar __BUFFER_RB__
	liberar __BUFFER_RC__
	liberar __REF_RES__
finfun

[DOCUMENTA
@brief Divide dos fracciones.
Aplica la forma de a/b * c/d = ad/bc.
Almacena el resultado en el argumento Yo.
@arg Yo primer elemento, debe ser una <a href="ref_referencias.html">referencia</a>.
@arg Tu segundo elemento, debe ser una <a href="ref_referencias.html">referencia</a>.
@arg res tercer argumento, una <a href="ref_referencias.html">referencia</a> a donde se guardara el resultado.
DOCUMENTA]
funcion Fraccion#dividir. [ Yo, Tu ]
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	adquirir __BUFFER_RA__
	adquirir __BUFFER_RB__
	adquirir __BUFFER_RC__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	empujar __REF_TU__
	empujar __REF_YO__ [ como Fraccion#multiplicar. solo que multiplicamos en X ]
	operador __BUFFER_A__ =* #numerador.
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RA__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	sacar __REF_YO__
	sacar __REF_TU__
	empujar __REF_TU__
	empujar __REF_YO__
	operador __BUFFER_A__ =* #denominador.
	operador __BUFFER_B__ =* #numerador.
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_B__ __REF_TU__
	operador __BUFFER_A__ =* Importar.Ent.Multiplicar
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_YO__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_TU__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RB__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	sacar __REF_YO__
	sacar __REF_TU__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* #numerador.
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_RES__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RA__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* #denominador.
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __REF_RES__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_RB__#NOMBRE. __BUFFER_A__
	ejecutar __BUFFER_A__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
	liberar __BUFFER_RA__
	liberar __BUFFER_RB__
	liberar __BUFFER_RC__
	liberar __REF_RES__
finfun

[DOCUMENTA
@brief Representa un valor de Boole.
Esta clase puede tener dos valores, verdadero y falso.
No hay atributos donde almacenar los valores, se acceden cual si
fueran <a href="ref_builtins.html#PseudoVariable">PseudoVariables</a>.
DOCUMENTA]
clase Boole
	:Y
	:O
	:NO
	:O-EXCLUSIVO
#(Final).
heredar Objeto Boole

[DOCUMENTA
@brief Operacion Y entre dos valores de Boole.
Devuelve verdadero si a y b son verdadero.
@arg Yo <a href="ref_referencias.html">Referencia</a> al valor numero 1 a comparar.
@arg b <a href="ref_referencias.html">Referencia</a> al valor numero 2 a comparar.
@dev Verdadero o Falso.
DOCUMENTA]
funcion Boole#Y.
	adquirir __VAL_YO__
	adquirir __VAL_TU__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	adquirir __BUFFER_C__
	adquirir __VALOR__
	operador __VALOR__ =¿? FALSO
	sacar __VAL_YO__
	sacar __VAL_TU__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__#NOMBRE. __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __VAL_YO__ __BUFFER_A__
	ejecutar __BUFFER_A__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_C__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_C__#NOMBRE. __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_C__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __VAL_TU__ __BUFFER_A__
	ejecutar __BUFFER_A__
	si __BUFFER_C__
		si __BUFFER_B__
			operador __VALOR__ =¿? VERDADERO
		fin
	fin
	si_no __BUFFER_C__
		operador __VALOR__ =¿? FALSO
	fin
	empujar __VALOR__
	liberar __VAL_YO__
	liberar __VAL_TU__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
	liberar __BUFFER_C__
	liberar __VALOR__
finfun

[DOCUMENTA
@brief Operacion O entre dos valores de Boole.
Devuelve verdadero si a es verdadero, b es verdadero, o ambos son verdadero.
@arg Yo <a href="ref_referencias.html">Referencia</a> al valor numero 1 a comparar.
@arg b <a href="ref_referencias.html">Referencia</a> al valor numero 2 a comparar.
@dev Verdadero o Falso.
DOCUMENTA]
funcion Boole#O.
	adquirir __VAL_YO__
	adquirir __VAL_TU__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	adquirir __BUFFER_C__
	adquirir __VALOR__
	operador __VALOR__ =¿? FALSO
	sacar __VAL_YO__
	sacar __VAL_TU__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__#NOMBRE. __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __VAL_YO__ __BUFFER_A__
	ejecutar __BUFFER_A__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_C__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_C__#NOMBRE. __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_C__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __VAL_TU__ __BUFFER_A__
	ejecutar __BUFFER_A__
	si __BUFFER_C__
		operador __VALOR__ =¿? VERDADERO
	fin
	si __BUFFER_B__
		operador __VALOR__ =¿? VERDADERO
	fin
	empujar __VALOR__
	liberar __VAL_YO__
	liberar __VAL_TU__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
	liberar __BUFFER_C__
	liberar __VALOR__
finfun

[DOCUMENTA
@brief Operacion O-EXCLUSIVO entre dos valores de Boole.
Devuelve verdadero si a y b son distintos.
@arg Yo <a href="ref_referencias.html">Referencia</a> al valor numero 1 a comparar.
@arg b <a href="ref_referencias.html">Referencia</a> al valor numero 2 a comparar.
@dev Verdadero o Falso.
DOCUMENTA]
funcion Boole#O-EXCLUSIVO.
	adquirir __VAL_YO__
	adquirir __VAL_TU__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	adquirir __BUFFER_C__
	adquirir __VALOR__
	operador __VALOR__ =¿? FALSO
	sacar __VAL_YO__
	sacar __VAL_TU__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__#NOMBRE. __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __VAL_YO__ __BUFFER_A__
	ejecutar __BUFFER_A__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_C__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_C__#NOMBRE. __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_C__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __VAL_TU__ __BUFFER_A__
	ejecutar __BUFFER_A__
	si ¿son_iguales? __BUFFER_B__ __BUFFER_C__
		operador __VALOR__ =¿? FALSO
	fin
	si_no ¿son_iguales? __BUFFER_B__ __BUFFER_C__
		operador __VALOR__ =¿? VERDADERO
	fin
	empujar __VALOR__
	liberar __VAL_YO__
	liberar __VAL_TU__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
	liberar __BUFFER_C__
	liberar __VALOR__
finfun

[DOCUMENTA
@brief Operacion NO de un valor de Boole.
Devuelve verdadero si a es falso, y falso si a es verdadero.
@arg Yo <a href="ref_referencias.html">Referencia</a> al valor a negar.
@dev Verdadero o Falso.
DOCUMENTA]
funcion Boole#NO.
	adquirir __VAL_YO__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	adquirir __VALOR__
	operador __VALOR__ =¿? FALSO
	sacar __VAL_YO__
	operador __BUFFER_A__ =* operador
	operador __BUFFER_B__ =* =¿?
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__#NOMBRE. __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __BUFFER_B__ __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ ESP __BUFFER_A__
	Importar.Cad.Concatenar __BUFFER_A__ __VAL_YO__ __BUFFER_A__
	ejecutar __BUFFER_A__
	si __BUFFER_B__
		operador __VALOR__ =¿? FALSO
	fin
	si_no __BUFFER_B__
		operador __VALOR__ =¿? VERDADERO
	fin
	empujar __VALOR__
	liberar __VAL_YO__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
	liberar __VALOR__
finfun

[DOCUMENTA
@brief Representa un numero en Z.
Para un numero en Q, se pueden utilizar las clases <a href="ref_clases.html#Fraccion">Fraccion</a>
y <a href="ref_clases.html#Decimal">Decimal</a>.
El valor se almacena en el campo valor, como en Decimal.
DOCUMENTA]
clase Numero
	valor
	:sumar
	:restar
	:multiplicar
	:dividir
#(Final).
heredar Objeto Numero

[DOCUMENTA
@brief Suma dos Numeros.
@arg Yo <a href="ref_referencias.html">Referencia</a> a el primer numero a sumar.
@arg b <a href="ref_referencias.html">Referencia</a> a el segundo numero a sumar.
@arg res <a href="ref_referencias.html">Referencia</a> a donde se almacenara el resultado.
DOCUMENTA]
funcion Numero#sumar.
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	operador __BUFFER_A__ =* #valor. 
	operador __BUFFER_B__ =* Importar.Ent.Sumar 
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_A__ __REF_TU__
	Importar.Cad.Concatenar __REF_RES__ __BUFFER_A__ __REF_RES__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_YO__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_TU__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_RES__ __BUFFER_B__
	ejecutar __BUFFER_B__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __REF_RES__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
finfun

[DOCUMENTA
@brief Resta dos Numeros.
@arg Yo <a href="ref_referencias.html">Referencia</a> a el primer numero a restar.
@arg b <a href="ref_referencias.html">Referencia</a> a el segundo numero a restar.
@arg res <a href="ref_referencias.html">Referencia</a> a donde se almacenara el resultado.
DOCUMENTA]
funcion Numero#restar.
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	operador __BUFFER_A__ =* #valor. 
	operador __BUFFER_B__ =* Importar.Ent.Restar 
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_A__ __REF_TU__
	Importar.Cad.Concatenar __REF_RES__ __BUFFER_A__ __REF_RES__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_YO__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_TU__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_RES__ __BUFFER_B__
	ejecutar __BUFFER_B__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __REF_RES__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
finfun

[DOCUMENTA
@brief Multiplica dos Numeros.
@arg Yo <a href="ref_referencias.html">Referencia</a> a el primer numero a multiplicar.
@arg b <a href="ref_referencias.html">Referencia</a> a el segundo numero a multiplicar.
@arg res <a href="ref_referencias.html">Referencia</a> a donde se almacenara el resultado.
DOCUMENTA]
funcion Numero#multiplicar.
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	operador __BUFFER_A__ =* #valor. 
	operador __BUFFER_B__ =* Importar.Ent.Multiplicar 
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_A__ __REF_TU__
	Importar.Cad.Concatenar __REF_RES__ __BUFFER_A__ __REF_RES__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_YO__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_TU__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_RES__ __BUFFER_B__
	ejecutar __BUFFER_B__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __REF_RES__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
finfun

[DOCUMENTA
@brief Divide dos Numeros.
@arg Yo <a href="ref_referencias.html">Referencia</a> a el primer numero a dividir.
@arg b <a href="ref_referencias.html">Referencia</a> a el segundo numero a dividir.
@arg res <a href="ref_referencias.html">Referencia</a> a donde se almacenara el resultado.
DOCUMENTA]
funcion Numero#dividir.
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	operador __BUFFER_A__ =* #valor. 
	operador __BUFFER_B__ =* Importar.Ent.Dividir 
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_A__ __REF_TU__
	Importar.Cad.Concatenar __REF_RES__ __BUFFER_A__ __REF_RES__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_YO__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_TU__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_RES__ __BUFFER_B__
	ejecutar __BUFFER_B__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __REF_RES__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
finfun

[DOCUMENTA
@brief Representa un numero en Q.
Para numeros en Z, u otra representacion de numeros en Q, se pueden ver:
<a href="ref_clases.html#Numero">Numero</a> para representaciones en Z.
<a href="ref_clases.html#Fraccion">Fraccion</a> para representaciones en Q.
DOCUMENTA]
clase Decimal
	valor
	:sumar
	:restar
	:multiplicar
	:dividir
#(Final).
heredar Objeto Decimal

[DOCUMENTA
@brief Suma dos Numeros Decimales.
@arg Yo <a href="ref_referencias.html">Referencia</a> a el primer numero a sumar.
@arg b <a href="ref_referencias.html">Referencia</a> a el segundo numero a sumar.
@arg res <a href="ref_referencias.html">Referencia</a> a donde se almacenara el resultado.
DOCUMENTA]
funcion Decimal#sumar.
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	operador __BUFFER_A__ =* #valor. 
	operador __BUFFER_B__ =* Importar.Dec.Sumar 
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_A__ __REF_TU__
	Importar.Cad.Concatenar __REF_RES__ __BUFFER_A__ __REF_RES__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_YO__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_TU__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_RES__ __BUFFER_B__
	ejecutar __BUFFER_B__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __REF_RES__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
finfun

[DOCUMENTA
@brief Resta dos Numeros Decimales.
@arg Yo <a href="ref_referencias.html">Referencia</a> a el primer numero a restar.
@arg b <a href="ref_referencias.html">Referencia</a> a el segundo numero a restar.
@arg res <a href="ref_referencias.html">Referencia</a> a donde se almacenara el resultado.
DOCUMENTA]
funcion Decimal#restar.
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	operador __BUFFER_A__ =* #valor. 
	operador __BUFFER_B__ =* Importar.Dec.Restar 
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_A__ __REF_TU__
	Importar.Cad.Concatenar __REF_RES__ __BUFFER_A__ __REF_RES__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_YO__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_TU__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_RES__ __BUFFER_B__
	ejecutar __BUFFER_B__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __REF_RES__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
finfun

[DOCUMENTA
@brief Multiplica dos Numeros Decimales.
@arg Yo <a href="ref_referencias.html">Referencia</a> a el primer numero a multiplicar.
@arg b <a href="ref_referencias.html">Referencia</a> a el segundo numero a multiplicar.
@arg res <a href="ref_referencias.html">Referencia</a> a donde se almacenara el resultado.
DOCUMENTA]
funcion Decimal#multiplicar.
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	operador __BUFFER_A__ =* #valor. 
	operador __BUFFER_B__ =* Importar.Dec.Multiplicar 
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_A__ __REF_TU__
	Importar.Cad.Concatenar __REF_RES__ __BUFFER_A__ __REF_RES__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_YO__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_TU__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_RES__ __BUFFER_B__
	ejecutar __BUFFER_B__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __REF_RES__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
finfun

[DOCUMENTA
@brief Divide dos Numeros decimales.
@arg Yo <a href="ref_referencias.html">Referencia</a> a el primer numero a dividir.
@arg b <a href="ref_referencias.html">Referencia</a> a el segundo numero a dividir.
@arg res <a href="ref_referencias.html">Referencia</a> a donde se almacenara el resultado.
DOCUMENTA]
funcion Decimal#dividir.
	adquirir __REF_YO__
	adquirir __REF_TU__
	adquirir __REF_RES__
	adquirir __BUFFER_A__
	adquirir __BUFFER_B__
	sacar __REF_YO__
	sacar __REF_TU__
	sacar __REF_RES__
	operador __BUFFER_A__ =* #valor. 
	operador __BUFFER_B__ =* Importar.Dec.Dividir 
	Importar.Cad.Concatenar __REF_YO__ __BUFFER_A__ __REF_YO__
	Importar.Cad.Concatenar __REF_TU__ __BUFFER_A__ __REF_TU__
	Importar.Cad.Concatenar __REF_RES__ __BUFFER_A__ __REF_RES__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_YO__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_TU__ __BUFFER_B__
	Importar.Cad.Concatenar __BUFFER_B__ __REF_RES__ __BUFFER_B__
	ejecutar __BUFFER_B__
	liberar __REF_YO__
	liberar __REF_TU__
	liberar __REF_RES__
	liberar __BUFFER_A__
	liberar __BUFFER_B__
finfun
