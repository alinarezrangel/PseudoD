[ ******************************************************************************
*****************************************
*********
** algor.pseudo: Algoritmos de utilidad.
** PseudoD fue creado por Alejandro Linarez Rangel
** algor.pseudo fue creado por Alejandro Linarez Rangel
** Puede copiar, redistribuir y modificar este archivo con permiso de
** <proyectopseudod@gmail.com>.
*****************************************
****************************************************************************** ]

utilizar inic.pseudo
utilizar tipos.pseudo

[DOCUMENTA
@file Documentación de algor.pseudo.
Este archivo posee clases dinamicas, que representan objetos comunes, como
listas, arrays, funciones tipo foreach, arboles binarios, etc.
DOCUMENTA]

[DOCUMENTA
@brief Es un arreglo dinámico de elementos.
A diferencia de un arreglo común, aqui los elementos no están en
posiciones sucesivas de memoria.
DOCUMENTA]
clase Arreglo
	tamaño
	:crear
	:destruir
	:obtener
	:agregar
finclase
heredar Objeto Arreglo

[DOCUMENTA
@brief Crea el arreglo.
El arreglo inicial tiene un tamaño 0 y esta vacio.
@argyo
@errors Active
DOCUMENTA]
funcion Arreglo#crear [ ref yo ]
	instancia Referencia yo
	recibir_parametro yo#ref
	adquirir tamaño
	fijar tamaño =* tamaño
	llamar yo#fijarAttr tamaño CERO #(Final).
	liberar tamaño
	liberar yo
finfun

[DOCUMENTA
@brief Libera la memoria ocupada por el arreglo.
Adicionalmente, si se necesita destruir por completo el arreglo,
debes invocar a liberar.
@argyo
@errors Active
DOCUMENTA]
funcion Arreglo#destruir [ ref yo ]
	instancia Referencia yo
	adquirir tamaño
	adquirir indice
	adquirir variable
	adquirir orden
	recibir_parametro yo#ref
	fijar tamaño =* tamaño
	llamar yo#obtenerAttr tamaño #(Final).
	recibir_resultado tamaño
	fijar indice =* 0
	mientras comparar Importar.Ent.Comparar indice < tamaño
		fijar variable =* en
		Importar.Cad.Concatenar variable indice variable
		llamar DestruirAtributoDinamico yo#ref variable #(Final).
		Importar.Ent.Sumar indice UNO indice
	finbucle
	liberar orden
	liberar variable
	liberar indice
	liberar tamaño
	liberar yo
finfun

[DOCUMENTA
@brief Obtiene un elemento en una determinada posición.
Si la posición es invalida, devuelve NULO.
@argyo
@arg i Índice del elemento, entre 0 y tamaño.
@dev Referencia al elemento.
@errors Active
DOCUMENTA]
funcion Arreglo#obtener [ ref yo, i -> ref at ]
	instancia Referencia yo
	adquirir tamaño
	adquirir prefijo
	adquirir indice
	adquirir valido
	recibir_parametro yo#ref
	recibir_parametro indice
	fijar tamaño =* tamaño
	llamar yo#obtenerAttr tamaño #(Final).
	recibir_resultado tamaño
	fijar valido =¿? VERDADERO
	si comparar Importar.Ent.Comparar indice < CERO
		devolver NULO
		fijar valido =¿? FALSO
	fin
	si comparar Importar.Ent.Comparar indice > tamaño
		devolver NULO
		fijar valido =¿? FALSO
	fin
	si valido
		fijar prefijo =* #en
		Importar.Cad.Concatenar yo#ref prefijo prefijo
		Importar.Cad.Concatenar prefijo indice prefijo
		devolver prefijo
	fin
	liberar valido
	liberar prefijo
	liberar indice
	liberar tamaño
	liberar yo
finfun

[DOCUMENTA
@brief Agrega un elemento al final.
También incrementa el tamaño del arreglo.
@argyo
@arg tipo Tipo del dato a agregar.
@dev Índice del nuevo elemento.
@errors Active
DOCUMENTA]
funcion Arreglo#agregar [ ref yo, tipo tipo -> indice ]
	instancia Referencia yo
	adquirir tamaño
	adquirir attr
	adquirir tipo
	recibir_parametro yo#ref
	recibir_parametro tipo
	fijar attr =* tamaño
	llamar yo#obtenerAttr attr #(Final).
	recibir_resultado tamaño
	fijar attr =* en
	Importar.Cad.Concatenar attr tamaño attr
	llamar CrearAtributoDinamico yo#ref attr tipo #(Final).
	devolver tamaño
	Importar.Ent.Sumar tamaño UNO tamaño
	fijar attr =* tamaño
	llamar yo#fijarAttr attr tamaño #(Final).
	liberar attr
	liberar tipo
	liberar tamaño
	liberar yo
finfun

