ESTE ARCHIVO CONTIENE TEXTO UNICODE

   ____                     _       ____
  |  _ \ ___  ___ _   _  __| | ___ |  _ \
  | |_) / __|/ _ \ | | |/ _` |/ _ \| | | |
  |  __/\__ \  __/ |_| | (_| | (_) | |_| |
  |_|   |___/\___|\__,_|\__,_|\___/|____/

Copyright 2016 Alejandro Linarez Rangel

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=============================================================================

Ver README.mkd para una introducción

=============================================================================

Bienvenido a la Biblioteca Estándar de PseudoD (BEPD) versión 2.2.0:2.2.0,
diseñada para ser usada como mínimo con PseudoD 2.2.0.

La BEPD declara sistemas necesarios para poder utilizar PseudoD, más algunos
para facilitar su uso.

La tabla de versiones de la BEPD es:

 __________________________________________________________________________
/ Archivo          | Parte de                      | Versión               \
|------------------|-------------------------------|-----------------------|
| builtins         | Inicialización                | 2.2.0                 |
| inic             | Inicialización                | 2.2.0                 |
| clases           | Utilidades                    | 2.0.0                 |
| tipos            | Utilidades, Algoritmos        | 2.1.0                 |
| algor            | Algoritmos                    | 2.1.0                 |
| cadena           | Utilidades                    | 2.2.0                 |
| plugins          | Bibliotecas Dinámicas         | 1.9.5                 |
| entsal           | Entrada y salida              | 2.2.0                 |
| errores          | Errores                       | 2.2.0                 |
| mate             | Matemáticas                   | 2.2.0                 |
\------------------'-------------------------------'-----------------------/

El formato utilizado para documentar la BEPD es:

- `*texto*`: `texto` esta en itálicas
- `**texto**`: `texto` esta en negrita
- `<texto>` o `<texto#enlace>`: Si existe una sección en el documento actual
llamada `texto`, entonces es un enlace a dicha sección. Si en cambio, `texto`
es el nombre de un archivo entonces `texto` es un enlace a dicho archivo y
de estar presente, `enlace` es la sección referida
- ``texto``: `texto` es un fragmento de código fuente
- ````
...
````: Bloque de código.

Las etiquetas son:

- `@brief ...`: El resto de la línea es una descripción breve.
- `@arg argname ...`: `argname` es un argumento y el resto de la línea es la
descripción de dicho.
- `@dev ...`: El resto de la línea es una descripción del valor retornado.
- `@races ...`: Indica que condiciones de carrera posee el procedimiento, el
resto de la línea son los nombres formales de las condiciones y el siguiente
parrafo describe dichas condiciones de carrera. `@races None` indica que no
hay condiciones de carrera. También se utiliza para indicar las condiciones
de error de una función o método.
- ` * ...`: Una lista como en Markdown o AsciiDoc[tor].
- `@obsolete`: Se encuentra obsoleto.
- `@abstract`: La clase o método es abstracto.
- `@file ...`: Como `@brief` pero da la descripción del archivo.
- `@throws ...`: Lista de excepciones que puede lanzar.

Para todas las etiquetas de una única línea, terminarla con `\` la continuará
en la siguiente.

Los valores para la etiqueta `@races ...` son:

- `None`: No hay errores o condiciones de carrera.
- `ReturnValue.Shared`: El valor de retorno puede (o es) compartido entre
llamadas de la función o entre otras funciones (o ambos).
- `Undefined.NoBoundsCheck`: Algún valor (argumento o interno o valor de
retorno) no es verificado antes o después (o ambos) de la función pudiendo
albergar valores inválidos (y consecuentemente, errores al usarlos).
- `Undefined.NoSameType`: Algún argumento (o todos) deben ser del mismo tipo
que algún objeto específico (generalmente el objeto que está llamando al
método). De cualquier otra manera el comportamiento del método está indefinido.
- `Stack.Underflow`: Una o más condiciones pueden ocasionar que alguna
pila de datos sufra un *underflow*. Durante el *underflow*, se sacan más
datos de la pila de los que dicha contiene ocasionando un error.
- `Fatal.HaveAttr`: Si un objeto determinado posee un atributo específico,
la función puede fallar.
- `Fatal.NonAttr`: Si un objeto determinado **no** posee un atributo
específico, la función puede fallar.
- `Fatal.NotAType`: Si un objeto específico **no es un tipo** (clase)
la función puede fallar.

Los archivos (por utilidad) son:

- builtins.pseudo (automático), inic.pseudo (automático): Inicialízan PseudoD
- errores.pseudo (automático): Clases de error
- cadena.pseudo: Operaciones sobre cadenas de caracteres
- clases.pseudo: Clase `Par` y `ElementoMatematico` (`Fraccion`, `Decimal`,
`Entero`, `Boole`)
- entsal.pseudo: Funciones de entrada y salida como en C
- mate.pseudo: Utilidades matemáticas
- plugins.pseudo: Sistema de carga de módulos dinámicos
- algor.pseudo: Estructuras de datos y algoritmos
- tipos.pseudo: Utilidades (`CrearAtributoDinamico`, `DestruirAtributoDinamico`)

- Directorio gt/: Generalidades de tipo.
- Directorio rt/: Rasgos de tipo.
- Directorio cl/: Clases de utilidad.
- Directorio fn/: Funciones de utilidad.
- Directorio ag/: Algoritmos.
- Directorio dt/: Estructuras de datos.
- Directorio mt/: Biblioteca matemática.

                      Biblioteca de Generalidades de tipo

La biblioteca de generalidades de tipo declaran un montón de clases, interfaces
y plantillas útiles para el trabajo en PseudoD.

La biblioteca de generalidades de tipo sigue las convenciones estándares de
nombres, tal como en la BEPD con una única excepción: la BEPD nunca declara
interfaces, mientras que la biblioteca de generalidades de tipo si. Todas las
interfaces definidas comanzarán con un carácter arroba (`@`) seguido por el
nombre de la interfáz.
