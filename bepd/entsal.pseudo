[ ******************************************************************************
*****************************************
*********
** entsal.pseudo: Archivo Entrada/salida de PseudoD.
** PseudoD fue creado por Alejandro Linarez Rangel
** clases.pseudo fue creado por Alejandro Linarez Rangel
** Puede copiar, redistribuir y modificar este archivo con permiso de
** <proyectopseudod@gmail.com>.
*****************************************
****************************************************************************** ]

utilizar clases.pseudo

[DOCUMENTA
@file Documentación de entsal.pseudo
Este archivo provee manipulación de *flujos*, en estos, las operaciones
de entrada y salida, se realiza comúnmente por operaciones *append*,
por las cuales, se agrega el contenido al flujo de salida, para lectura,
una vez que se lee del flujo, esa palabra es eliminada, prohibiendo su
lectura más de dos veces.
DOCUMENTA]

[DOCUMENTA
@brief Un objeto que sirve de buffer para operaciones E/S.
DOCUMENTA]
clase BufferTexto hereda Objeto
	atributo valor
	metodo escribir
	metodo escribirLinea
finclase

[DOCUMENTA
@brief Escribe un texto en la salida estándar.
Equivalente a `escribir`
@arg texto Valor a escribir.
@races None
DOCUMENTA]
funcion Escribir [ Objeto texto ]
	adquirir texto
	recibir_parametro texto
	escribir texto
	liberar texto
finfun

[DOCUMENTA
@brief Casi identico a <Escribir>.
La diferencia esta en que ingresa un valor nueva linea al final, como
en `escribir` seguido de `nl`
@arg texto Valor a escribir.
@races None
DOCUMENTA]
funcion EscribirLinea [ Objeto texto ]
	adquirir texto
	recibir_parametro texto
	escribir texto
	nl
	liberar texto
finfun

[DOCUMENTA
@brief Lee un valor desde la entrada estandar, y lo retorna.
@dev El valor leido.
@races None
DOCUMENTA]
funcion LeerPalabra [ -> Objeto resultado ]
	adquirir valor
	leer valor
	devolver valor
	liberar valor
finfun

[DOCUMENTA
@brief Escribe en un objeto <BufferTexto>.
@argyo
@arg texto Texto a escribir en el.
@races None
DOCUMENTA]
funcion BufferTexto#escribir [ BufferTexto buffer, Objeto texto ]
	adquirir yo
	adquirir texto
	recibir_parametro yo
	recibir_parametro texto
	Importar.Cad.Concatenar <yo>#valor texto <yo>#valor
	liberar texto
	liberar yo
finfun

[DOCUMENTA
@brief Similar a <BufferTexto\#escribir>.
Este además, agrega un nueva linea despues de texto.
@argyo
@arg texto Texto a escribir en el.
@races None
DOCUMENTA]
funcion BufferTexto#escribirLinea [ Objeto buffer, Objeto texto ]
	adquirir yo
	adquirir texto
	recibir_parametro yo
	recibir_parametro texto
	Importar.Cad.concatenar <yo>#valor texto <yo>#valor
	Importar.Cad.concatenar <yo>#valor NUEVALINEA <yo>#valor
	liberar texto
	liberar yo
finfun

[DOCUMENTA
@brief Representa una configuracion de salida.
Donde:

 * `MARCA` Es el comodin para el reemplazo.
 * `SPEC` Es el comodin para el caracter especial.
 * `NLINE` Es el comodin para el nueva linea,(junto con `SPEC`).
 * `NLINER` Es el comodin para el retorno de carro,(junto con `SPEC`).
 * `NLINE` Es el comodin para el nueva linea del sistema,(junto con `SPEC`).
DOCUMENTA]
clase DatosDeSalida hereda Objeto
	atributo MARCA
	atributo SPEC
	atributo NLINE
	atributo NLINER
	atributo NLINERR
	atributo CV
	atributo NL
	atributo RC
finclase

[DOCUMENTA
@brief Es la configuracion predeterminada del sistema de E/S.
Donde:

 * <b>MARCA</b> es %.
 * <b>SPEC</b> es \.
 *  <b>NLINE</b> es n.
 *  <b>NLINER</b> es r.
 * <b>NLINERR</b> es k.
DOCUMENTA]
instancia DatosDeSalida DATOS_DE_IMPRIMIR
fijar DATOS_DE_IMPRIMIR#MARCA =* %
fijar DATOS_DE_IMPRIMIR#SPEC =* \
fijar DATOS_DE_IMPRIMIR#NLINE =* n
fijar DATOS_DE_IMPRIMIR#NLINER =* r
fijar DATOS_DE_IMPRIMIR#NLINERR =* k
empujar VG_BUFFER
fijar VG_BUFFER =* CV
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#CV
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#NL
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#RC
fijar VG_BUFFER =* NL
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#NL
fijar VG_BUFFER =* RC
Importar.Cad.Caracter_Especial VG_BUFFER DATOS_DE_IMPRIMIR#RC
sacar VG_BUFFER

[DOCUMENTA
@brief Imprime una lista de argumentos.
Los separa por espacios.
@arg str Primer argumento a imprimir (obligatorio).
@arg args... Lista de argumentos terminada en <builtins.pseudo#NULO>.
@races Stack.Underflow
Si la lista de argumentos no termina en <builtins.pseudo#NULO>, se bloqueara y
terminara con un *stack underflow*.
DOCUMENTA]
funcion Imprimir [ str args... NULO ]
	adquirir inicio
	adquirir argumento
	recibir_parametro inicio
	sacar argumento
	escribir inicio
	mientras sean diferentes argumento y NULO
		escribir_esp
		escribir argumento
		sacar argumento
	finbucle
	empujar NULO
	liberar inicio
	liberar argumento
finfun

[DOCUMENTA
@brief Equivalente a imprimir.
Solo que agrega un nl al final.
@arg str Primer argumento a imprimir (obligatorio).
@arg args... Lista de argumentos terminada en <builtins.pseudo#NULO>.
@races Stack.Underflow
Si la lista de argumentos no termina en <builtins.pseudo#NULO>, se bloqueara y
terminara con un *stack underflow*.
DOCUMENTA]
funcion ImprimirLinea [ str args... NULO ]
	adquirir inicio
	adquirir argumento
	recibir_parametro inicio
	sacar argumento
	escribir inicio
	mientras sean diferentes argumento y NULO
		escribir_esp
		escribir argumento
		sacar argumento
	finbucle
	nl
	empujar NULO
	liberar inicio
	liberar argumento
finfun

[DOCUMENTA
@brief Equivalente en PseudoD a printf.
El formateo se realiza de la siguiente forma:

Si se encuentra un comodin de reemplazo,(por defecto `%`) se saca un argumento
y se imprime, si encambio, se encuentra un comodin de caracter especial,
se formatea el siguiente caracter y se imprime.

Es decir, lo que en C es `"Hola\r\nMundo %s"` aqui es `"Hola\r\n Mundo %"`.
Si se desea imprimir un caracter `%`, basta con agregar un \ atras: `"\%"` = `"%"`.
En caso de que se requiera el nuevalinea del sistema, utilize
`\k`. `"\k"` = `std::endl`.

A diferencia de C printf, este no requiere especificación del tipo, solo el
comodin. En total, lo formatos aceptados son: `\r` = Retorno de carro, `\n` =
Nueva linea, `\k` = Nueva linea del sistema, `%` = Argumento. Para escapar `\` use
`\\`.
@arg str Cadena a formatear
@arg args... Lista de argumentos, no se verifica su tamaño.
@races Stack.Underflow
Si se especifica un comodin de caracter especial en el final de la cadena,
o se especifica un comodin de reemplazo y falta el argumento, causara un
*stack underflow*.
DOCUMENTA]
funcion ImprimirFormato [ str args... ]
	adquirir cadena
	adquirir caracter
	adquirir ind
	adquirir tam
	recibir_parametro cadena
	fijar ind a {0}
	Importar.Cad.Tamaño cadena tam
	mientras comparar Importar.Ent.Comparar ind < tam
		fijar caracter a DATOS_DE_IMPRIMIR#CV
		Importar.Cad.Caracter ind cadena caracter
		si son iguales caracter y DATOS_DE_IMPRIMIR#MARCA
			recibir_parametro caracter
		fin
		si son iguales caracter y DATOS_DE_IMPRIMIR#SPEC
			Importar.Ent.Sumar ind UNO ind
			fijar caracter a DATOS_DE_IMPRIMIR#CV
			Importar.Cad.Caracter ind cadena caracter
			si son iguales caracter y DATOS_DE_IMPRIMIR#NLINE
				fijar caracter a DATOS_DE_IMPRIMIR#NL
			fin
			si son iguales caracter y DATOS_DE_IMPRIMIR#NLINER
				fijar caracter a DATOS_DE_IMPRIMIR#RC
			fin
			si son iguales caracter y DATOS_DE_IMPRIMIR#NLINERR
				fijar caracter a DATOS_DE_IMPRIMIR#CV
				nl
			fin
			escribir caracter
			fijar caracter a DATOS_DE_IMPRIMIR#CV
		fin
		escribir caracter
		Importar.Ent.Sumar ind UNO ind
	finbucle
	liberar cadena
	liberar caracter
	liberar ind
	liberar tam
finfun
