[ ******************************************************************************
*****************************************
*********
** Bibliotecas de Clases de Utilidad: subconjunto de la BEPD.
** Representa una Fraccion.
*********
*****************************************
********************************************************************************
Copyright 2016 Alejandro Linarez Rangel

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
********************************************************************************
****************************************************************************** ]

utilizar cl/elementoaritmetico.pseudo

utilizar mt/aritmetica.pseudo

[DOCUMENTA
@brief `Fraccion` - Representa un numero en el conjunto `Q`, en forma de \
fracción.
A diferencia de <clases.pseudo#Decimal>, este utiliza una representacion en
forma de fracción y no una representacion decimal.
DOCUMENTA]
clase Fraccion hereda ElementoAritmetico
	atributo numerador
	atributo denominador

	metodo sumar
	metodo restar
	metodo multiplicar
	metodo dividir
finclase

[DOCUMENTA
@brief `Fraccion#sumar` - Suma dos fracciones.
Aplica la forma de `a/b + c/d = (ad + bc)/bd`.

Almacena el resultado en el argumento res.

@argyo
@arg der Referencia al elemento derecho de la operación a aplicar.
@arg res Referencia al elemento donde se almacenará el resultado.

@races None
DOCUMENTA]
funcion Fraccion#sumar con yo y der y res
	fijar <res>#numerador a llamar Sumar
		llamar Multiplicar <yo>#numerador <der>#denominador finargs
		llamar Multiplicar <yo>#denominador <der>#numerador finargs
	finargs
	fijar <res>#denominador a llamar Multiplicar
		<yo>#denominador <der>#denominador
	finargs
finfun

[DOCUMENTA
@brief `Fraccion#restar` - Resta dos fracciones.
Aplica la forma de `a/b - c/d = (ad - bc)/bd`.

Almacena el resultado en el argumento res.

@argyo
@arg der Referencia al elemento derecho de la operación a aplicar.
@arg res Referencia al elemento donde se almacenará el resultado.

@races None
DOCUMENTA]
funcion Fraccion#restar con yo y der y res
	fijar <res>#numerador a llamar Restar
		llamar Multiplicar <yo>#numerador <der>#denominador finargs
		llamar Multiplicar <yo>#denominador <der>#numerador finargs
	finargs
	fijar <res>#denominador a llamar Multiplicar
		<yo>#denominador <der>#denominador
	finargs
finfun

[DOCUMENTA
@brief `Fraccion#multiplicar` - Multiplica dos fracciones.
Aplica la forma de `a/b * c/d = ac/bd`.

Almacena el resultado en el argumento res.

@argyo
@arg der Referencia al elemento derecho de la operación a aplicar.
@arg res Referencia al elemento donde se almacenará el resultado.

@races None
DOCUMENTA]
funcion Fraccion#multiplicar con yo y der y res
	fijar <res>#numerador a llamar Multiplicar
		<yo>#numerador <der>#numerador
	finargs
	fijar <res>#denominador a llamar Multiplicar
		<yo>#denominador <der>#denominador
	finargs
finfun

[DOCUMENTA
@brief `Fraccion#dividir` - Divide dos fracciones.
Aplica la forma de `a/b * c/d = ad/bc`.

Almacena el resultado en el argumento res.

@argyo
@arg der Referencia al elemento derecho de la operación a aplicar.
@arg res Referencia al elemento donde se almacenará el resultado.

@races None
DOCUMENTA]
funcion Fraccion#dividir con yo y der y res
	fijar <res>#numerador a llamar Multiplicar
		<yo>#numerador <der>#denominador
	finargs
	fijar <res>#denominador a llamar Multiplicar
		<yo>#denominador <der>#numerador
	finargs
finfun
