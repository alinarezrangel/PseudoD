[ ******************************************************************************
*****************************************
*********
** Bibliotecas de Clases de Utilidad: subconjunto de la BEPD.
** BufferTexto: Implementación de `@FlujoTexto` con buffering.
*********
*****************************************
********************************************************************************
Copyright 2016 Alejandro Linarez Rangel

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
********************************************************************************
****************************************************************************** ]

utilizar gt/flujotexto.pseudo

utilizar fn/tipocaracter.pseudo

[DOCUMENTA
@brief `BufferTexto` - Flujo de texto básico con *buffering*
El Buffer de Texto básicamente actua como un flujo de texto, solo que todos los
datos que se leen o escriben se encuentran en una variable que contiene toda
la información.
DOCUMENTA]
clase BufferTexto hereda Objeto implementa @FlujoTexto
	atributo cursor
	atributo buffer
	atributo cerrado
	atributo fda

	metodo abrir
	metodo cerrar

	metodo estaCerrado

	metodo puedeLeer
	metodo puedeEscribir

	metodo leerCaracter
	metodo leerPalabra
	metodo leerLinea
	metodo leerBloque

	metodo escribirTexto
	metodo escribirLinea

	metodo fijarPosicion
	metodo obtenerPosicion

	metodo finDelFlujo

	metodo crear

	metodo obtenerBuffer
	metodo fijarBuffer
finclase

funcion BufferTexto#crear con yo
	fijar <yo>#cerrado a FALSO
	fijar <yo>#cursor a {0}
	fijar <yo>#buffer a {}
	fijar <yo>#fda a FALSO
finfun

[DOCUMENTA
@brief `BufferTexto#obtenerBuffer` - Obtiene el buffer interno.
En el buffer interno es donde se escribe/leen todos los datos.

@argyo

@dev El buffer interno.

@races None
DOCUMENTA]
funcion BufferTexto#obtenerBuffer con yo
finfun

[DOCUMENTA
@brief `BufferTexto#fijarBuffer` - Fijar el buffer interno.
En el buffer interno es donde se escribe/leen todos los datos.

@argyo
@arg buffer Texto que será el nuevo buffer interno.

@races None
DOCUMENTA]
funcion BufferTexto#fijarBuffer con yo y buffer
	fijar <yo>#buffer a buffer
finfun

[DOCUMENTA
@brief `BufferTexto#abrir` - Abre un flujo para su uso.
Note que:

 * Si no se logra abrir correctamente el flujo lanzará un error y dejará el
flujo en un estádo tal que se pueda volver a llamar a este método para
reintentar abrir el flujo.
 * Abrir un flujo ya abierto lanzará un error.

@argyo

@races None
DOCUMENTA]
funcion BufferTexto#abrir con yo
	necesitas <yo>#cerrado

	fijar <yo>#cerrado a FALSO
finfun

[DOCUMENTA
@brief `BufferTexto#cerrar` - Cierra el flujo.
Luego de cerrar el flujo, cualquier operación de lectura, escritura o marcada
como "De acceso al flujo" lanzará un error (más no quedan indefinidas).

Al intentar cerrar más de una vez el mismo flujo sin reabrirlo (operación que
no todos soportan, véase <BufferTexto\#abrir>) puede lanzar un error.

@argyo

@races None
DOCUMENTA]
funcion BufferTexto#cerrar con yo
	necesitas no <yo>#cerrado

	fijar <yo>#cerrado a VERDADERO
finfun

[DOCUMENTA
@brief `BufferTexto#estaCerrado` - Determina si el flujo está cerrado.
De ser <builtins.pseudo#VERDADERO>, es seguro abrir el flujo de nuevo (no
lanzará algún error porque el flujo ya este abierto) y de ser
<builtins.pseudo#FALSO> es seguro cerrar el flujo (no lanzará algún error
porque el flujo ya estaba cerrado).

@argyo

@dev <builtins.pseudo#VERDADERO> si el flujo esta cerrado, \
<builtins.pseudo#FALSO> en caso contrario.

@races None
DOCUMENTA]
funcion BufferTexto#estaCerrado con yo
	devolver <yo>#cerrado
finfun

[DOCUMENTA
@brief `BufferTexto#puedeLeer` - Determina si se puede leer del flujo.
Si devuelve <builtins.pseudo#FALSO>, cualquier operación de lectura lanzará
un error (más no está indefinida).

@argyo

@dev <builtins.pseudo#VERDADERO> si se puede leer del flujo, \
<builtins.pseudo#FALSO> en caso contrario.

@races
DOCUMENTA]
funcion BufferTexto#puedeLeer con yo
	devolver VERDADERO
finfun

[DOCUMENTA
@brief `BufferTexto#puedeEscribir` - Determina si se puede escribir en el flujo.
Si devuelve <builtins.pseudo#FALSO>, cualquier operación de escritura lanzará
un error (más no está indefinida).

@argyo

@dev <builtins.pseudo#VERDADERO> si se puede escribir en el flujo, \
<builtins.pseudo#FALSO> en caso contrario.

@races
DOCUMENTA]
funcion BufferTexto#puedeEscribir con yo
	devolver FALSO
finfun

[DOCUMENTA
@brief `BufferTexto#leerCaracter` - Lee un carácter del flujo.
Lee un único carácter y lo devuelve. Si el flujo terminó (EOF, FDA,
*Fin Del Archivo*) devuelve una cadena vacía (`{}`).

@argyo

@dev Carácter que se leyó o la cadena vacía (`{}`).

@races None
DOCUMENTA]
funcion BufferTexto#leerCaracter con yo
	necesitas no <yo>#cerrado

	si <yo>#fda
		devolver {}
	sino
		adquirir caracter
		adquirir tam_buffer

		fijar caracter a {}

		Importar.Cad.Caracter <yo>#cursor <yo>#buffer caracter
		Importar.Ent.Sumar <yo>#cursor UNO <yo>#cursor
		Importar.Cad.Tamaño <yo>#buffer tam_buffer

		fijar <yo>#fda a comparar Importar.Ent.Comparar <yo>#cursor >= tam_buffer

		devolver caracter

		liberar caracter
		liberar tam_buffer
	fin
finfun

[DOCUMENTA
@brief `BufferTexto#leerPalabra` - Lee una palabra del flujo.
Una palabra es una secuencia de carácteres delimitados por uno o más espacios
en blanco. Un espacio en blanco es:

 * Un espacio (hex. 20, dec. 32).
 * Un tabulador (hex. 9, dec. 9).
 * Un retorno de carro (hex. D, dec. 13).
 * Una nueva línea (hex. A, dec. 10).
 * Cualquier carácter marcado por la codificación actual como espacio en blanco.

Si llega a leer el fin del flujo (EOF, FDA, *Fin Del Archivo*) se retornará la
cadena vacía (`{}`).

@argyo

@dev La palabra leída o la cadena vacía (`{}`).

@races None
DOCUMENTA]
funcion BufferTexto#leerPalabra con yo
	necesitas no <yo>#cerrado

	si <yo>#fda
		devolver {}
	sino
		adquirir caracter
		adquirir linea
		adquirir tam_buffer
		adquirir cond

		Importar.Cad.Tamaño <yo>#buffer tam_buffer

		fijar caracter a {}
		fijar linea a {}

		fijar cond a
			si tanto
				no llamar TipoCaracter#EsEspacioEnBlanco caracter finargs
			como
				comparar Importar.Ent.Comparar <yo>#cursor < tam_buffer

		mientras cond
			fijar caracter a {}
			Importar.Cad.Caracter <yo>#cursor <yo>#buffer caracter
			Importar.Ent.Sumar <yo>#cursor UNO <yo>#cursor
			Importar.Cad.Concatenar linea caracter linea

			fijar cond a
				si tanto
					no llamar TipoCaracter#EsEspacioEnBlanco caracter finargs
				como
					comparar Importar.Ent.Comparar <yo>#cursor < tam_buffer
		finbucle

		fijar <yo>#fda a comparar Importar.Ent.Comparar <yo>#cursor >= tam_buffer

		devolver linea

		liberar caracter
		liberar linea
		liberar tam_buffer
		liberar cond
	fin
finfun

[DOCUMENTA
@brief `BufferTexto#leerLinea` - Lee una línea del flujo.
Una línea son todos los carácteres desde la posición actual del flujo hasta
un carácter de nueva línea (hex. A, dec. 10). Si se llega a leer el fin del
flujo se retornará la cadena vacía (`{}`).

@argyo

@dev La línea leída o la cadena vacía (`{}`)

@races None
DOCUMENTA]
funcion BufferTexto#leerLinea con yo
	necesitas no <yo>#cerrado

	si <yo>#fda
		devolver {}
	sino
		adquirir caracter
		adquirir linea
		adquirir tam_buffer
		adquirir cond

		Importar.Cad.Tamaño <yo>#buffer tam_buffer

		fijar caracter a {}
		fijar linea a {}

		fijar cond a
			si tanto
				no llamar TipoCaracter#EsFinDeLinea caracter finargs
			como
				comparar Importar.Ent.Comparar <yo>#cursor < tam_buffer

		mientras cond
			fijar caracter a {}
			Importar.Cad.Caracter <yo>#cursor <yo>#buffer caracter
			Importar.Ent.Sumar <yo>#cursor UNO <yo>#cursor
			Importar.Cad.Concatenar linea caracter linea

			fijar cond a
				si tanto
					no llamar TipoCaracter#EsFinDeLinea caracter finargs
				como
					comparar Importar.Ent.Comparar <yo>#cursor < tam_buffer
		finbucle

		fijar <yo>#fda a comparar Importar.Ent.Comparar <yo>#cursor >= tam_buffer

		devolver linea

		liberar caracter
		liberar linea
		liberar tam_buffer
		liberar cond
	fin
finfun

[DOCUMENTA
@brief `BufferTexto#leerBloque` - Lee un bloque de datos.
Un bloque es una cantidad de carácteres específica.

Si no hay suficientes carácteres como para retornar un bloque del tamaño
específico, se retornará la cantidad de carácteres que se logren leer o la
cadena vacía (`{}`).

@argyo
@arg tam_bloque Tamaño del bloque a leer en carácteres.

@dev Bloque leído o la cadena vacía (`{}`).
DOCUMENTA]
funcion BufferTexto#leerBloque con yo y tam_bloque
	necesitas no <yo>#cerrado

	si <yo>#fda
		devolver {}
	sino
		adquirir caracter
		adquirir bloque
		adquirir tam_buffer
		adquirir cond
		adquirir tam_bql

		Importar.Cad.Tamaño <yo>#buffer tam_buffer

		fijar caracter a {}
		fijar bloque a {}
		fijar tam_bql a {0}

		fijar cond a
			si tanto
				comparar Importar.Ent.Comparar tam_bql <= tam_bloque
			como
				comparar Importar.Ent.Comparar <yo>#cursor < tam_buffer

		mientras cond
			fijar caracter a {}
			Importar.Cad.Tamaño bloque tam_bql
			Importar.Cad.Caracter <yo>#cursor <yo>#buffer caracter
			Importar.Ent.Sumar <yo>#cursor UNO <yo>#cursor
			Importar.Cad.Concatenar bloque caracter bloque

			fijar cond a
				si tanto
					comparar Importar.Ent.Comparar tam_bql <= tam_bloque
				como
					comparar Importar.Ent.Comparar <yo>#cursor < tam_buffer
		finbucle

		fijar <yo>#fda a comparar Importar.Ent.Comparar <yo>#cursor >= tam_buffer

		devolver bloque

		liberar caracter
		liberar bloque
		liberar tam_buffer
		liberar cond
		liberar tam_bql
	fin
finfun

[DOCUMENTA
@brief `BufferTexto#escribirTexto` - Escribe un texto dentro del flujo.
Al texto no se le agregan ni "nueva línea" ni otros carácteres.

@argyo
@arg texto Texto a escribir.

@races None
DOCUMENTA]
funcion BufferTexto#escribirTexto con yo y texto
	necesitas no <yo>#cerrado

	adquirir antes
	adquirir despues
	adquirir tam_buffer
	adquirir tam_despues

	fijar tam_despues a {0}

	Importar.Cad.Tamaño <yo>#buffer tam_buffer

	Importar.Ent.Restar tam_buffer <yo>#cursor tam_despues

	Importar.Cad.Sub_Cadena CERO <yo>#cursor <yo>#buffer antes
	Importar.Cad.Sub_Cadena <yo>#cursor tam_despues <yo>#buffer despues

	Importar.Cad.Concatenar antes texto texto
	Importar.Cad.Concatenar texto despues texto

	fijar <yo>#buffer a texto

	Importar.Cad.Tamaño texto tam_buffer
	Importar.Ent.Sumar <yo>#cursor tam_buffer <yo>#cursor

	fijar <yo>#fda a comparar Importar.Ent.Comparar <yo>#cursor >= tam_buffer

	liberar antes
	liberar despues
	liberar tam_buffer
finfun

[DOCUMENTA
@brief `BufferTexto#escribirLinea` - Escribe una línea de texto.
Tal como <BufferTexto\#escribirTexto> solo que agrega un "nueva línea"
al final.

@argyo
@arg texto Texto a escribir.

@races None
DOCUMENTA]
funcion BufferTexto#escribirLinea con yo y linea
	Importar.Cad.Concatenar linea TipoCaracter#CaracterNuevaLinea linea
	llamar <yo>#escribirTexto linea finargs
finfun

[DOCUMENTA
@brief `BufferTexto#fijarPosicion` - Fija la posición del cursor del flujo.
El cursor del flujo indica donde se realizará la siguiente operación tanto
de lectura como de escritura.

La posición siempre es un **entero** que indica la cantidad de carácteres
pasadas el inicio del flujo para llegar a la posición dada.

@argyo
@arg posicion Nueva posición del cursor.

@races None
DOCUMENTA]
funcion BufferTexto#fijarPosicion con yo y posicion
	adquirir tam_buffer

	Importar.Cad.Tamaño <yo>#buffer tam_buffer

	fijar <yo>#cursor a posicion

	fijar <yo>#fda a comparar Importar.Ent.Comparar <yo>#cursor >= tam_buffer

	liberar tam_buffer
finfun

[DOCUMENTA
@brief `BufferTexto#obtenerPosicion` - Obtiene la posición del cursor del flujo.
El cursor del flujo indica donde se realizará la siguiente operación tanto
de lectura como de escritura.

La posición siempre es un **entero** que indica la cantidad de carácteres
pasadas el inicio del flujo para llegar a la posición dada.

@argyo

@dev Actual posición del cursor.

@races None
DOCUMENTA]
funcion BufferTexto#obtenerPosicion con yo
	devolver <yo>#cursor
finfun

[DOCUMENTA
@brief `BufferTexto#finDelFlujo` - Determina si se llegó al fin del flujo.
De ser <builtins.pseudo#VERDADERO>, el cursor del flujo esta pasado o en el
fin del flujo, indicando que no hay más datos que leer. Básicamente en flujos
de solo escritura este método devolverá siempre <builtins.pseudo#VERDADERO>
a menos que se cambie la ubicación de escritura con
<BufferTexto\#fijarPosicion>.

@argyo

@dev Si el cursor del flujo está al final de dicho.

@races None
DOCUMENTA]
funcion BufferTexto#finDelFlujo con yo
	devolver <yo>#fda
finfun
