[ ******************************************************************************
*****************************************
*********
** tipos.pseudo: Algoritmos de utilidad.
** PseudoD fue creado por Alejandro Linarez Rangel
** tipos.pseudo fue creado por Alejandro Linarez Rangel
** Puede copiar, redistribuir y modificar este archivo con permiso de
** <proyectopseudod@gmail.com>.
*****************************************
****************************************************************************** ]

utilizar inic.pseudo

[DOCUMENTA
@file Documentaci√≥n de tipos.pseudo.
Aqui se encuentran funciones comunes de PseudoD, la clase Referencia, es
la clase principal de este archivo, permitiendo referenciar variables de
forma eficiente y simple.
DOCUMENTA]

[DOCUMENTA
@brief Representa una referencia a un objeto.
Este requiere que se campo ref sea fijado a el nombre(ref) de la
variable a fijar. Esta variable puede ser una instancia de cualquier clase.
DOCUMENTA]
clase Referencia
	ref
	:obtenerAttrStr
	:obtenerAttr
	:fijarAttr
	:redireccionarAttr
	:llamarMet
	:obtenerValor
#(Final).
heredar Objeto Referencia

[DOCUMENTA
@brief Devuelve en forma de cadena, el atributo de la referencia.
Por ejemplo: si la referencia es A y el atributo es B devuelve A#B
@arg instancia Referencia comun al valor Yo(PseudoD lo pasa automaticamente)
@arg attr Atributo a devolver.
@dev El atributo en forma de cadena.
@errors Active
DOCUMENTA]
funcion Referencia#obtenerAttrStr [ ref instancia, attr ]
	adquirir __REFERENCIA_OBT_ATTR_STR_REF__
	adquirir __REFERENCIA_OBT_ATTR_STR_BUFF__
	adquirir __REFERENCIA_OBT_ATTR_STR_BUFF2__
	adquirir __REFERENCIA_OBT_ATTR_STR_ATTR__
	recibir_parametro __REFERENCIA_OBT_ATTR_STR_REF__
	recibir_parametro __REFERENCIA_OBT_ATTR_STR_ATTR__
	fijar __REFERENCIA_OBT_ATTR_STR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF2__ __REFERENCIA_OBT_ATTR_STR_ATTR__ __REFERENCIA_OBT_ATTR_STR_BUFF2__
	fijar __REFERENCIA_OBT_ATTR_STR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_REF__ __REFERENCIA_OBT_ATTR_STR_BUFF__ __REFERENCIA_OBT_ATTR_STR_REF__
	fijar __REFERENCIA_OBT_ATTR_STR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ __REFERENCIA_OBT_ATTR_STR_REF__ __REFERENCIA_OBT_ATTR_STR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ ESP __REFERENCIA_OBT_ATTR_STR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ __REFERENCIA_OBT_ATTR_STR_BUFF2__#NOMBRE __REFERENCIA_OBT_ATTR_STR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ ESP __REFERENCIA_OBT_ATTR_STR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ __REFERENCIA_OBT_ATTR_STR_BUFF__#NOMBRE __REFERENCIA_OBT_ATTR_STR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_STR_BUFF__
	devolver __REFERENCIA_OBT_ATTR_STR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_STR_ATTR__
	liberar __REFERENCIA_OBT_ATTR_STR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_STR_BUFF2__
	liberar __REFERENCIA_OBT_ATTR_STR_REF__
finfun

[DOCUMENTA
@brief Devuelve el valor del atributo.
A diferencia de <code>Referencia#obtenerAttrStr</code>, este devuelve el valor
del atributo, por ejemplo: dada la referencia A y el atributo B devuelve el valor
de A#B y no la cadena A#B.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@arg attr Atributo a acceder.
@dev El valor del atributo.
@errors Inactive
Si el atributo no existe, lanzara un error fatal.
DOCUMENTA]
funcion Referencia#obtenerAttr [ ref instancia, attr ]
	adquirir __REFERENCIA_OBT_ATTR_ATTR__
	adquirir __REFERENCIA_OBT_ATTR_BUFF__
	adquirir __REFERENCIA_OBT_ATTR_REF__
	adquirir __REFERENCIA_OBT_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_OBT_ATTR_REF__
	recibir_parametro __REFERENCIA_OBT_ATTR_ATTR__
	fijar __REFERENCIA_OBT_ATTR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF2__ __REFERENCIA_OBT_ATTR_ATTR__ __REFERENCIA_OBT_ATTR_BUFF2__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_REF__ __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_REF__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_REF__ __REFERENCIA_OBT_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ ESP __REFERENCIA_OBT_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_BUFF2__#NOMBRE __REFERENCIA_OBT_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ ESP __REFERENCIA_OBT_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_BUFF__#NOMBRE __REFERENCIA_OBT_ATTR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_BUFF__
	fijar __REFERENCIA_OBT_ATTR_BUFF2__ =* devolver 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF2__ __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_ATTR__
	liberar __REFERENCIA_OBT_ATTR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_REF__
	liberar __REFERENCIA_OBT_ATTR_BUFF2__
finfun

[DOCUMENTA
@brief Devuelve el valor del atributo.
Devuelve su valor bruto.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@dev El valor del atributo.
@errors Active
DOCUMENTA]
funcion Referencia#obtenerValor [ ref instancia ]
	adquirir __REFERENCIA_OBT_ATTR_ATTR__
	adquirir __REFERENCIA_OBT_ATTR_BUFF__
	adquirir __REFERENCIA_OBT_ATTR_REF__
	adquirir __REFERENCIA_OBT_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_OBT_ATTR_REF__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_REF__ __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_REF__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* empujar 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_REF__ __REFERENCIA_OBT_ATTR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_BUFF__
	sacar __REFERENCIA_OBT_ATTR_BUFF2__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* empujar 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_BUFF2__ __REFERENCIA_OBT_ATTR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_ATTR__
	liberar __REFERENCIA_OBT_ATTR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_REF__
	liberar __REFERENCIA_OBT_ATTR_BUFF2__
finfun

[DOCUMENTA
@brief Fija el valor del atributo.
En este proceso destruye el valor anterior.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@arg attr Atributo a fijar.
@arg val Nuevo valor para el atributo.
@errors Inactive
Si el atributo no existe, lanzara un error fatal.
DOCUMENTA]
funcion Referencia#fijarAttr [ ref instancia, attr, val ]
	adquirir __REFERENCIA_FJR_ATTR_ATTR__
	adquirir __REFERENCIA_FJR_ATTR_BUFF__
	adquirir __REFERENCIA_FJR_ATTR_REF__
	adquirir __REFERENCIA_FJR_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_FJR_ATTR_REF__
	recibir_parametro __REFERENCIA_FJR_ATTR_ATTR__
	fijar __REFERENCIA_FJR_ATTR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF2__ __REFERENCIA_FJR_ATTR_ATTR__ __REFERENCIA_FJR_ATTR_BUFF2__
	fijar __REFERENCIA_FJR_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_REF__ __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_REF__
	fijar __REFERENCIA_FJR_ATTR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_REF__ __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ ESP __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF2__#NOMBRE __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ ESP __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF__#NOMBRE __REFERENCIA_FJR_ATTR_BUFF__
	ejecutar __REFERENCIA_FJR_ATTR_BUFF__
	fijar __REFERENCIA_FJR_ATTR_BUFF2__ =* fijar 
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF2__ __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ ESP __REFERENCIA_FJR_ATTR_BUFF__
	fijar __REFERENCIA_FJR_ATTR_BUFF2__ =* =* 
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF2__ __REFERENCIA_FJR_ATTR_BUFF__
	recibir_parametro __REFERENCIA_FJR_ATTR_BUFF2__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF2__ __REFERENCIA_FJR_ATTR_BUFF__
	ejecutar __REFERENCIA_FJR_ATTR_BUFF__
	liberar __REFERENCIA_FJR_ATTR_ATTR__
	liberar __REFERENCIA_FJR_ATTR_BUFF__
	liberar __REFERENCIA_FJR_ATTR_REF__
	liberar __REFERENCIA_FJR_ATTR_BUFF2__
finfun

[DOCUMENTA
@brief Redirecciona el valor del atributo puntero.
Solo funciona si el atributo pasado es un puntero. Lo redirecciona a una
nueva variable.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@arg attr Atributo puntero a redireccionar.
@arg var Variable a redireccionar el puntero(referencia comun).
@errors Inactive
Si el atributo no existe, lanzara un error fatal.
DOCUMENTA]
funcion Referencia#redireccionarAttr [ ref instancia, attr, val ]
	adquirir __REFERENCIA_RED_ATTR_ATTR__
	adquirir __REFERENCIA_RED_ATTR_BUFF__
	adquirir __REFERENCIA_RED_ATTR_REF__
	adquirir __REFERENCIA_RED_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_RED_ATTR_REF__
	recibir_parametro __REFERENCIA_RED_ATTR_ATTR__
	fijar __REFERENCIA_RED_ATTR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF2__ __REFERENCIA_RED_ATTR_ATTR__ __REFERENCIA_RED_ATTR_BUFF2__
	fijar __REFERENCIA_RED_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_REF__ __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_REF__
	fijar __REFERENCIA_RED_ATTR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_REF__ __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ ESP __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_BUFF2__#NOMBRE __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ ESP __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_BUFF__#NOMBRE __REFERENCIA_RED_ATTR_BUFF__
	ejecutar __REFERENCIA_RED_ATTR_BUFF__
	fijar __REFERENCIA_RED_ATTR_BUFF2__ =* redireccionar 
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF2__ __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ ESP __REFERENCIA_RED_ATTR_BUFF__
	recibir_parametro __REFERENCIA_RED_ATTR_BUFF2__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_BUFF2__ __REFERENCIA_RED_ATTR_BUFF__
	ejecutar __REFERENCIA_RED_ATTR_BUFF__
	liberar __REFERENCIA_RED_ATTR_ATTR__
	liberar __REFERENCIA_RED_ATTR_BUFF__
	liberar __REFERENCIA_RED_ATTR_REF__
	liberar __REFERENCIA_RED_ATTR_BUFF2__
finfun

[DOCUMENTA
@brief Llama al metodo de la referencia.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@arg met Metodo a llamar
@arg args Argumentos a pasar.
@dev El resultado de la funcion.
@errors Inactive
Si el m√©todo no existe, lanzara un error fatal.
DOCUMENTA]
funcion Referencia#llamarMet [ ref instancia, met, args... ]
	adquirir __REFERENCIA_LMR_ATTR_ATTR__
	adquirir __REFERENCIA_LMR_ATTR_BUFF__
	adquirir __REFERENCIA_LMR_ATTR_REF__
	adquirir __REFERENCIA_LMR_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_LMR_ATTR_REF__
	recibir_parametro __REFERENCIA_LMR_ATTR_ATTR__
	fijar __REFERENCIA_LMR_ATTR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF2__ __REFERENCIA_LMR_ATTR_ATTR__ __REFERENCIA_LMR_ATTR_BUFF2__
	fijar __REFERENCIA_LMR_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_REF__ __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_REF__
	fijar __REFERENCIA_LMR_ATTR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_REF__ __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ ESP __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_BUFF2__#NOMBRE __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ ESP __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_BUFF__#NOMBRE __REFERENCIA_LMR_ATTR_BUFF__
	ejecutar __REFERENCIA_LMR_ATTR_BUFF__
	fijar __REFERENCIA_LMR_ATTR_BUFF2__ =* llamar  
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF2__ __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_BUFF__
	fijar __REFERENCIA_LMR_ATTR_BUFF2__ =* #(Final).
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ ESP __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_BUFF2__ __REFERENCIA_LMR_ATTR_BUFF__
	ejecutar __REFERENCIA_LMR_ATTR_BUFF__
	liberar __REFERENCIA_LMR_ATTR_ATTR__
	liberar __REFERENCIA_LMR_ATTR_BUFF__
	liberar __REFERENCIA_LMR_ATTR_REF__
	liberar __REFERENCIA_LMR_ATTR_BUFF2__
finfun

adquirir __pseudod_ReservarDatos_i__
fijar __pseudod_ReservarDatos_i__ =* -9223372036854775807
adquirir __pseudod_pilaReseva_i__
fijar __pseudod_pilaReseva_i__ =* 1
crear_pila
usar_pila 1
empujar NULO
usar_pila 0

[DOCUMENTA
@brief Reserva datos de forma dinamica.
Cuando el nombre de un dato no importa (por ejemplo, en arreglos dinamicos)
se puede solicitar un dato, que se puede manipular por punteros. Es similar
a new tipoData en C++ y malloc(sizeof(tipoData)) en C.
Modifica VG_BUFFER.
@arg tipoData Tipo del dato.
@dev data Referencia al bloque dinamico.
@errors Active
DOCUMENTA]
funcion ReservarDato [ tipoData -> ref data ]
	adquirir __RESEVAR_DATO_TIPO__
	adquirir __RESEVAR_DATO_BUFFER__
	adquirir __RESEVAR_DATO_RET__
	recibir_parametro __RESEVAR_DATO_TIPO__
	fijar VG_BUFFER =¬ø? VG_PILA_ACTUAL
	fijar VG_PILA_ACTUAL =¬ø? __pseudod_pilaReseva_i__
	fijar __RESEVAR_DATO_RET__ =¬ø? FALSO
	sacar __RESEVAR_DATO_BUFFER__
	si ¬øson_iguales? __RESEVAR_DATO_BUFFER__ NULO
		empujar NULO
	sino
		empujar __pseudod_ReservarDatos_i__
		fijar __pseudod_ReservarDatos_i__ =¬ø? __RESEVAR_DATO_BUFFER__
		fijar __RESEVAR_DATO_RET__ =¬ø? VERDADERO
	fin
	fijar __RESEVAR_DATO_BUFFER__ =* instancia 
	Importar.Cad.Concatenar __RESEVAR_DATO_BUFFER__ __RESEVAR_DATO_TIPO__ __RESEVAR_DATO_BUFFER__
	Importar.Cad.Concatenar __RESEVAR_DATO_BUFFER__ ESP __RESEVAR_DATO_BUFFER__
	Importar.Cad.Concatenar __RESEVAR_DATO_BUFFER__ __pseudod_ReservarDatos_i__ __RESEVAR_DATO_BUFFER__
	ejecutar __RESEVAR_DATO_BUFFER__
	fijar __RESEVAR_DATO_BUFFER__ =¬ø? __pseudod_ReservarDatos_i__
	si no __RESEVAR_DATO_RET__
		Importar.Ent.Sumar __pseudod_ReservarDatos_i__ UNO __pseudod_ReservarDatos_i__
	sino
		sacar __pseudod_ReservarDatos_i__
	fin
	fijar VG_PILA_ACTUAL =¬ø? VG_BUFFER
	devolver __RESEVAR_DATO_BUFFER__
	liberar __RESEVAR_DATO_BUFFER__
	liberar __RESEVAR_DATO_TIPO__
	liberar __RESEVAR_DATO_RET__
finfun

[DOCUMENTA
@brief Libera un dato reservado con ReservarDato.
No cuenta para datos multiples. Tal como free de C
o delete de C++.
Adem√°s, fija el PunteroInteligente a nulo, de forma que el metodo esNulo
siempre devuelva verdadero.
Modifica VG_BUFFER.
@arg ptr Puntero al nombre del dato reservado(referencia a instancia de PunteroInteligente).
@errors Inactive
Cuando ptr apunta a nulo,(ptr#esNulo devuelve verdadero) el comportamiento de
la funci√≥n es indefinido.
DOCUMENTA]
funcion LiberarDato [ ptr ]
	instancia Referencia __LIBERAR_DATO_REF__
	adquirir __LIBERAR_DATO_BUFFA__
	adquirir __LIBERAR_DATO_BUFFB__
	adquirir __LIBERAR_DATO_BUFFC__
	recibir_parametro __LIBERAR_DATO_REF__#ref
	fijar __LIBERAR_DATO_BUFFA__ =* direccion
	llamar __LIBERAR_DATO_REF__#obtenerAttr __LIBERAR_DATO_BUFFA__ #(Final).
	recibir_resultado __LIBERAR_DATO_BUFFB__
	fijar __LIBERAR_DATO_BUFFA__ =* liberar 
	Importar.Cad.Concatenar __LIBERAR_DATO_BUFFA__ __LIBERAR_DATO_BUFFB__ __LIBERAR_DATO_BUFFA__
	ejecutar __LIBERAR_DATO_BUFFA__
	fijar VG_BUFFER =¬ø? VG_PILA_ACTUAL
	fijar VG_PILA_ACTUAL =¬ø? __pseudod_pilaReseva_i__
	empujar __LIBERAR_DATO_BUFFB__
	fijar VG_PILA_ACTUAL =¬ø? VG_BUFFER
	fijar __LIBERAR_DATO_BUFFA__ =* direccion
	llamar __LIBERAR_DATO_REF__#redireccionarAttr __LIBERAR_DATO_BUFFA__ NULO#NOMBRE #(Final).
	liberar __LIBERAR_DATO_REF__
	liberar __LIBERAR_DATO_BUFFA__
	liberar __LIBERAR_DATO_BUFFB__
	liberar __LIBERAR_DATO_BUFFC__
finfun

[DOCUMENTA
@brief Representa un iterador.
Es abstracta, nunca se debe instanciar.
DOCUMENTA]
clase Iterador
	;actual
	:¬øvalido?
	:reiniciar
#(Final).
heredar Objeto Iterador

[DOCUMENTA
@brief Representa un iterador que solo avanza.
Es abstracta, nunca se debe instanciar.
DOCUMENTA]
clase IteradorDel
	:siguiente
#(Final).
heredar Iterador IteradorDel

[DOCUMENTA
@brief Representa un iterador que solo retrocede.
Es abstracta, nunca se debe instanciar.
DOCUMENTA]
clase IteradorTra
	:anterior
#(Final).
heredar Iterador IteradorTra

[DOCUMENTA
@brief Representa un iterador bidireccional.
Es abstracta, nunca se debe instanciar.
DOCUMENTA]
clase IteradorBi
	:siguiente
	:anterior
#(Final).
heredar Iterador IteradorBi

[DOCUMENTA
@brief Representa un par de valores.
Posee un primero,(primer valor o clave) y un segundo,(segundo valor o valor).
DOCUMENTA]
clase Par
	primero
	segundo
#(Final).
heredar Objeto Par

[DOCUMENTA
@brief Crea un atributo dinamico.
Equivalente a escribir <code class="pseudod">instancia tattr yo#nattr</code>.
@arg yo Nombre de la instancia sobre la que se creara el atributo.
@arg nattr Nombre del atributo a crear.
@arg tattr Tipo de latributo a crear.
@errors Inactive
Si el atributo ya existe, lanzara un error fatal.
DOCUMENTA]
funcion CrearAtributoDinamico [ yo, nattr, tattr ]
	[ instancia tattr yo#nattr ]
	adquirir _CrearAtributoDinamico_yo
	adquirir _CrearAtributoDinamico_nattr
	adquirir _CrearAtributoDinamico_tattr
	adquirir _CrearAtributoDinamico_buf
	adquirir _CrearAtributoDinamico_buff
	recibir_resultado _CrearAtributoDinamico_yo
	recibir_resultado _CrearAtributoDinamico_nattr
	recibir_resultado _CrearAtributoDinamico_tattr
	fijar _CrearAtributoDinamico_buf =* instancia 
	Importar.Cad.Concatenar _CrearAtributoDinamico_buf _CrearAtributoDinamico_tattr _CrearAtributoDinamico_buff
	fijar _CrearAtributoDinamico_buf =* #
	Importar.Cad.Concatenar _CrearAtributoDinamico_buff ESP _CrearAtributoDinamico_buff
	Importar.Cad.Concatenar _CrearAtributoDinamico_buff _CrearAtributoDinamico_yo _CrearAtributoDinamico_buff
	Importar.Cad.Concatenar _CrearAtributoDinamico_buff _CrearAtributoDinamico_buf _CrearAtributoDinamico_buff
	Importar.Cad.Concatenar _CrearAtributoDinamico_buff _CrearAtributoDinamico_nattr _CrearAtributoDinamico_buff
	ejecutar _CrearAtributoDinamico_buff
	liberar _CrearAtributoDinamico_yo
	liberar _CrearAtributoDinamico_nattr
	liberar _CrearAtributoDinamico_tattr
	liberar _CrearAtributoDinamico_buf
	liberar _CrearAtributoDinamico_buff
finfun

[DOCUMENTA
@brief Destruye un atributo dinamico.
Este puede ser creado con CrearAtributoDinamico.
@arg yo Instancia sobre la que existe el atributo.
@arg nattr Nombre del atributo.
@errors Inactive
De ya estar destruido el atributo, lanzara un error fatal.
DOCUMENTA]
funcion DestruirAtributoDinamico [ yo, nattr ]
	[ instancia tattr yo#nattr ]
	adquirir _DestruirAtributoDinamico_yo
	adquirir _DestruirAtributoDinamico_nattr
	adquirir _DestruirAtributoDinamico_tattr
	adquirir _DestruirAtributoDinamico_buf
	adquirir _DestruirAtributoDinamico_buff
	recibir_resultado _DestruirAtributoDinamico_yo
	recibir_resultado _DestruirAtributoDinamico_nattr
	fijar _DestruirAtributoDinamico_buf =* liberar
	Importar.Cad.Concatenar _DestruirAtributoDinamico_buf ESP _DestruirAtributoDinamico_buff
	fijar _DestruirAtributoDinamico_buf =* #
	Importar.Cad.Concatenar _DestruirAtributoDinamico_buff _DestruirAtributoDinamico_yo _DestruirAtributoDinamico_buff
	Importar.Cad.Concatenar _DestruirAtributoDinamico_buff _DestruirAtributoDinamico_buf _DestruirAtributoDinamico_buff
	Importar.Cad.Concatenar _DestruirAtributoDinamico_buff _DestruirAtributoDinamico_nattr _DestruirAtributoDinamico_buff
	ejecutar _DestruirAtributoDinamico_buff
	liberar _DestruirAtributoDinamico_yo
	liberar _DestruirAtributoDinamico_nattr
	liberar _DestruirAtributoDinamico_tattr
	liberar _DestruirAtributoDinamico_buf
	liberar _DestruirAtributoDinamico_buff
finfun

