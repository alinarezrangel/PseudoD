[ ******************************************************************************
*****************************************
*********
** tipos.pseudo: Algoritmos de utilidad.
** PseudoD fue creado por Alejandro Linarez Rangel
** tipos.pseudo fue creado por Alejandro Linarez Rangel
** Puede copiar, redistribuir y modificar este archivo con permiso de
** <proyectopseudod@gmail.com>.
*****************************************
****************************************************************************** ]

utilizar inic.pseudo

[DOCUMENTA
@brief Representa una referencia a un objeto.
Este requiere que se campo ref sea fijado a el nombre(ref) de la
variable a fijar. Esta variable puede ser una instancia de cualquier clase.
DOCUMENTA]
clase Referencia
	ref
	:obtenerAttrStr
	:obtenerAttr
	:fijarAttr
	:redireccionarAttr
	:llamarMet
	:obtenerValor
#(Final).
heredar Objeto Referencia

[DOCUMENTA
@brief Devuelve en forma de cadena, el atributo de la referencia.
Por ejemplo: si la referencia es A y el atributo es B devuelve A#B
@arg instancia Referencia comun al valor Yo(PseudoD lo pasa automaticamente)
@arg attr Atributo a devolver.
@dev El atributo en forma de cadena.
DOCUMENTA]
funcion Referencia#obtenerAttrStr [ ref instancia, attr ]
	adquirir __REFERENCIA_OBT_ATTR_STR_REF__
	adquirir __REFERENCIA_OBT_ATTR_STR_BUFF__
	adquirir __REFERENCIA_OBT_ATTR_STR_BUFF2__
	adquirir __REFERENCIA_OBT_ATTR_STR_ATTR__
	recibir_parametro __REFERENCIA_OBT_ATTR_STR_REF__
	recibir_parametro __REFERENCIA_OBT_ATTR_STR_ATTR__
	fijar __REFERENCIA_OBT_ATTR_STR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF2__ __REFERENCIA_OBT_ATTR_STR_ATTR__ __REFERENCIA_OBT_ATTR_STR_BUFF2__
	fijar __REFERENCIA_OBT_ATTR_STR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_REF__ __REFERENCIA_OBT_ATTR_STR_BUFF__ __REFERENCIA_OBT_ATTR_STR_REF__
	fijar __REFERENCIA_OBT_ATTR_STR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ __REFERENCIA_OBT_ATTR_STR_REF__ __REFERENCIA_OBT_ATTR_STR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ ESP __REFERENCIA_OBT_ATTR_STR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ __REFERENCIA_OBT_ATTR_STR_BUFF2__#NOMBRE __REFERENCIA_OBT_ATTR_STR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ ESP __REFERENCIA_OBT_ATTR_STR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_STR_BUFF__ __REFERENCIA_OBT_ATTR_STR_BUFF__#NOMBRE __REFERENCIA_OBT_ATTR_STR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_STR_BUFF__
	devolver __REFERENCIA_OBT_ATTR_STR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_STR_ATTR__
	liberar __REFERENCIA_OBT_ATTR_STR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_STR_BUFF2__
	liberar __REFERENCIA_OBT_ATTR_STR_REF__
finfun

[DOCUMENTA
@brief Devuelve el valor del atributo.
A diferencia de <code>Referencia#obtenerAttrStr</code>, este devuelve el valor
del atributo, por ejemplo: dada la referencia A y el atributo B devuelve el valor
de A#B y no la cadena A#B.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@arg attr Atributo a acceder.
@dev El valor del atributo.
DOCUMENTA]
funcion Referencia#obtenerAttr [ ref instancia, attr ]
	adquirir __REFERENCIA_OBT_ATTR_ATTR__
	adquirir __REFERENCIA_OBT_ATTR_BUFF__
	adquirir __REFERENCIA_OBT_ATTR_REF__
	adquirir __REFERENCIA_OBT_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_OBT_ATTR_REF__
	recibir_parametro __REFERENCIA_OBT_ATTR_ATTR__
	fijar __REFERENCIA_OBT_ATTR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF2__ __REFERENCIA_OBT_ATTR_ATTR__ __REFERENCIA_OBT_ATTR_BUFF2__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_REF__ __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_REF__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_REF__ __REFERENCIA_OBT_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ ESP __REFERENCIA_OBT_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_BUFF2__#NOMBRE __REFERENCIA_OBT_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ ESP __REFERENCIA_OBT_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_BUFF__#NOMBRE __REFERENCIA_OBT_ATTR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_BUFF__
	fijar __REFERENCIA_OBT_ATTR_BUFF2__ =* devolver 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF2__ __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_ATTR__
	liberar __REFERENCIA_OBT_ATTR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_REF__
	liberar __REFERENCIA_OBT_ATTR_BUFF2__
finfun

[DOCUMENTA
@brief Devuelve el valor del atributo.
Devuelve su valor bruto.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@dev El valor del atributo.
DOCUMENTA]
funcion Referencia#obtenerValor [ ref instancia ]
	adquirir __REFERENCIA_OBT_ATTR_ATTR__
	adquirir __REFERENCIA_OBT_ATTR_BUFF__
	adquirir __REFERENCIA_OBT_ATTR_REF__
	adquirir __REFERENCIA_OBT_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_OBT_ATTR_REF__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_REF__ __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_REF__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* empujar 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_REF__ __REFERENCIA_OBT_ATTR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_BUFF__
	sacar __REFERENCIA_OBT_ATTR_BUFF2__
	fijar __REFERENCIA_OBT_ATTR_BUFF__ =* empujar 
	Importar.Cad.Concatenar __REFERENCIA_OBT_ATTR_BUFF__ __REFERENCIA_OBT_ATTR_BUFF2__ __REFERENCIA_OBT_ATTR_BUFF__
	ejecutar __REFERENCIA_OBT_ATTR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_ATTR__
	liberar __REFERENCIA_OBT_ATTR_BUFF__
	liberar __REFERENCIA_OBT_ATTR_REF__
	liberar __REFERENCIA_OBT_ATTR_BUFF2__
finfun

[DOCUMENTA
@brief Fija el valor del atributo.
En este proceso destruye el valor anterior.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@arg attr Atributo a fijar.
@arg val Nuevo valor para el atributo.
DOCUMENTA]
funcion Referencia#fijarAttr [ ref instancia, attr, val ]
	adquirir __REFERENCIA_FJR_ATTR_ATTR__
	adquirir __REFERENCIA_FJR_ATTR_BUFF__
	adquirir __REFERENCIA_FJR_ATTR_REF__
	adquirir __REFERENCIA_FJR_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_FJR_ATTR_REF__
	recibir_parametro __REFERENCIA_FJR_ATTR_ATTR__
	fijar __REFERENCIA_FJR_ATTR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF2__ __REFERENCIA_FJR_ATTR_ATTR__ __REFERENCIA_FJR_ATTR_BUFF2__
	fijar __REFERENCIA_FJR_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_REF__ __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_REF__
	fijar __REFERENCIA_FJR_ATTR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_REF__ __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ ESP __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF2__#NOMBRE __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ ESP __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF__#NOMBRE __REFERENCIA_FJR_ATTR_BUFF__
	ejecutar __REFERENCIA_FJR_ATTR_BUFF__
	fijar __REFERENCIA_FJR_ATTR_BUFF2__ =* fijar 
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF2__ __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ ESP __REFERENCIA_FJR_ATTR_BUFF__
	fijar __REFERENCIA_FJR_ATTR_BUFF2__ =* =* 
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF2__ __REFERENCIA_FJR_ATTR_BUFF__
	recibir_parametro __REFERENCIA_FJR_ATTR_BUFF2__
	Importar.Cad.Concatenar __REFERENCIA_FJR_ATTR_BUFF__ __REFERENCIA_FJR_ATTR_BUFF2__ __REFERENCIA_FJR_ATTR_BUFF__
	ejecutar __REFERENCIA_FJR_ATTR_BUFF__
	liberar __REFERENCIA_FJR_ATTR_ATTR__
	liberar __REFERENCIA_FJR_ATTR_BUFF__
	liberar __REFERENCIA_FJR_ATTR_REF__
	liberar __REFERENCIA_FJR_ATTR_BUFF2__
finfun

[DOCUMENTA
@brief Redirecciona el valor del atributo puntero.
Solo funciona si el atributo pasado es un puntero. Lo redirecciona a una
nueva variable.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@arg attr Atributo puntero a redireccionar.
@arg var Variable a redireccionar el puntero(referencia comun).
DOCUMENTA]
funcion Referencia#redireccionarAttr [ ref instancia, attr, val ]
	adquirir __REFERENCIA_RED_ATTR_ATTR__
	adquirir __REFERENCIA_RED_ATTR_BUFF__
	adquirir __REFERENCIA_RED_ATTR_REF__
	adquirir __REFERENCIA_RED_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_RED_ATTR_REF__
	recibir_parametro __REFERENCIA_RED_ATTR_ATTR__
	fijar __REFERENCIA_RED_ATTR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF2__ __REFERENCIA_RED_ATTR_ATTR__ __REFERENCIA_RED_ATTR_BUFF2__
	fijar __REFERENCIA_RED_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_REF__ __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_REF__
	fijar __REFERENCIA_RED_ATTR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_REF__ __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ ESP __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_BUFF2__#NOMBRE __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ ESP __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_BUFF__#NOMBRE __REFERENCIA_RED_ATTR_BUFF__
	ejecutar __REFERENCIA_RED_ATTR_BUFF__
	fijar __REFERENCIA_RED_ATTR_BUFF2__ =* redireccionar 
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF2__ __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ ESP __REFERENCIA_RED_ATTR_BUFF__
	recibir_parametro __REFERENCIA_RED_ATTR_BUFF2__
	Importar.Cad.Concatenar __REFERENCIA_RED_ATTR_BUFF__ __REFERENCIA_RED_ATTR_BUFF2__ __REFERENCIA_RED_ATTR_BUFF__
	ejecutar __REFERENCIA_RED_ATTR_BUFF__
	liberar __REFERENCIA_RED_ATTR_ATTR__
	liberar __REFERENCIA_RED_ATTR_BUFF__
	liberar __REFERENCIA_RED_ATTR_REF__
	liberar __REFERENCIA_RED_ATTR_BUFF2__
finfun

[DOCUMENTA
@brief Llama al metodo de la referencia.
@arg instancia Referencia comun al valor Yo(PseudoD la pasa automaticamente)
@arg met Metodo a llamar
@arg args Argumentos a pasar.
@dev El resultado de la funcion.
DOCUMENTA]
funcion Referencia#llamarMet [ ref instancia, met, args... ]
	adquirir __REFERENCIA_LMR_ATTR_ATTR__
	adquirir __REFERENCIA_LMR_ATTR_BUFF__
	adquirir __REFERENCIA_LMR_ATTR_REF__
	adquirir __REFERENCIA_LMR_ATTR_BUFF2__
	recibir_parametro __REFERENCIA_LMR_ATTR_REF__
	recibir_parametro __REFERENCIA_LMR_ATTR_ATTR__
	fijar __REFERENCIA_LMR_ATTR_BUFF2__ =* #
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF2__ __REFERENCIA_LMR_ATTR_ATTR__ __REFERENCIA_LMR_ATTR_BUFF2__
	fijar __REFERENCIA_LMR_ATTR_BUFF__ =* #ref
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_REF__ __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_REF__
	fijar __REFERENCIA_LMR_ATTR_BUFF__ =* Importar.Cad.Concatenar 
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_REF__ __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ ESP __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_BUFF2__#NOMBRE __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ ESP __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_BUFF__#NOMBRE __REFERENCIA_LMR_ATTR_BUFF__
	ejecutar __REFERENCIA_LMR_ATTR_BUFF__
	fijar __REFERENCIA_LMR_ATTR_BUFF2__ =* llamar  
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF2__ __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_BUFF__
	fijar __REFERENCIA_LMR_ATTR_BUFF2__ =* #(Final).
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ ESP __REFERENCIA_LMR_ATTR_BUFF__
	Importar.Cad.Concatenar __REFERENCIA_LMR_ATTR_BUFF__ __REFERENCIA_LMR_ATTR_BUFF2__ __REFERENCIA_LMR_ATTR_BUFF__
	ejecutar __REFERENCIA_LMR_ATTR_BUFF__
	liberar __REFERENCIA_LMR_ATTR_ATTR__
	liberar __REFERENCIA_LMR_ATTR_BUFF__
	liberar __REFERENCIA_LMR_ATTR_REF__
	liberar __REFERENCIA_LMR_ATTR_BUFF2__
finfun

adquirir __pseudod_ReservarDatos_i__
fijar __pseudod_ReservarDatos_i__ =* -9223372036854775808

[DOCUMENTA
@brief Reserva datos de forma dinamica.
Cuando el nombre de un dato no importa (por ejemplo, en arreglos dinamicos)
se puede solicitar un dato, que se puede manipular por punteros. Es similar
a new tipoData en C++ y malloc(sizeof(tipoData)) en C.
@arg tipoData Tipo del dato.
@dev data Referencia al bloque dinamico.
DOCUMENTA]
funcion ReservarDato [ tipoData -> ref data ]
	adquirir __RESEVAR_DATOS__TIPO_DATA__
	adquirir __RESEVAR_DATOS__BUFFER__
	recibir_parametro __RESEVAR_DATOS__TIPO_DATA__
	fijar __RESEVAR_DATOS__BUFFER__ =* instancia 
	Importar.Cad.Concatenar __RESEVAR_DATOS__BUFFER__ __RESEVAR_DATOS__TIPO_DATA__ __RESEVAR_DATOS__TIPO_DATA__
	Importar.Cad.Concatenar __RESEVAR_DATOS__TIPO_DATA__ ESP __RESEVAR_DATOS__TIPO_DATA__
	Importar.Cad.Concatenar __RESEVAR_DATOS__TIPO_DATA__ __pseudod_ReservarDatos_i__ __RESEVAR_DATOS__TIPO_DATA__
	ejecutar __RESEVAR_DATOS__TIPO_DATA__
	fijar __RESEVAR_DATOS__TIPO_DATA__ =¿? __pseudod_ReservarDatos_i__
	Importar.Ent.Sumar __pseudod_ReservarDatos_i__ UNO __pseudod_ReservarDatos_i__
	devolver __RESEVAR_DATOS__TIPO_DATA__
	liberar __RESEVAR_DATOS__BUFFER__
	liberar __RESEVAR_DATOS__TIPO_DATA__
finfun

[DOCUMENTA
@brief Libera un dato eservado con ReservarDato.
No cuenta para datos multiples. Tal como free de C
o delete de C++, cuando el dato es NULO no realiza accion.
@arg ptr Puntero al nombre del dato reservado(referencia a instancia de PunteroInteligente).
DOCUMENTA]
funcion LiberarDato [ ptr ]
	adquirir __LIBERAR_DATO_PTR__
	adquirir __LIBERAR_DATO_BUFFER__
	recibir_parametro __LIBERAR_DATO_PTR__
	fijar __LIBERAR_DATO_BUFFER__ =* liberar 
	si_no ¿son_iguales? __LIBERAR_DATO_PTR__ NULO#NOMBRE
		Importar.Cad.Concatenar __LIBERAR_DATO_BUFFER__ __LIBERAR_DATO_PTR__ __LIBERAR_DATO_BUFFER__
		ejecutar __LIBERAR_DATO_BUFFER__
	fin
	liberar __LIBERAR_DATO_BUFFER__
	liberar __LIBERAR_DATO_PTR__
finfun

[DOCUMENTA
@brief Representa un iterador.
Es abstracta, nunca se debe instanciar.
DOCUMENTA]
clase Iterador
	;actual
	:¿valido?
	:reiniciar
#(Final).
heredar Objeto Iterador

[DOCUMENTA
@brief Representa un iterador que solo avanza.
Es abstracta, nunca se debe instanciar.
DOCUMENTA]
clase IteradorDel
	:siguiente
#(Final).
heredar Iterador IteradorDel

[DOCUMENTA
@brief Representa un iterador que solo retrocede.
Es abstracta, nunca se debe instanciar.
DOCUMENTA]
clase IteradorTra
	:anterior
#(Final).
heredar Iterador IteradorTra

[DOCUMENTA
@brief Representa un iterador bidireccional.
Es abstracta, nunca se debe instanciar.
DOCUMENTA]
clase IteradorBi
	:siguiente
	:anterior
#(Final).
heredar Iterador IteradorBi

[DOCUMENTA
@brief Representa un iterador para ReservarDato y LiberarDato.
Con este se puede iterar sobre memoria.
DOCUMENTA]
clase IteradorDin
	lib
#(Final).
heredar IteradorBi IteradorDin


