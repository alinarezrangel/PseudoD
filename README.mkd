# PseudoD

[![Build Status](https://travis-ci.org/alinarezrangel/PseudoD.svg?branch=master)](https://travis-ci.org/alinarezrangel/PseudoD)

PseudoD es un lenguaje de programación interpretado, escrito en C++11 con
caracteristicas de alto y medio nivel. Es orientado a objetos y posee una
sintaxis en español.

## Contacto

* <proyectopseudod@gmail.com>

## Como construir

### Dependencias

* Paquete `build-essencials` en distros GNU/Linux
* GCC 4.8 o superior
* G++ 4.8 o superior

Realmente, GCC y G++ no son necesarios mientras se posea un compilador con
soporte de C++11 o C++14 (como CLANG 3.3 o superior).

### Construyendo

Para construir PseudoD solo se debe ejecutar `make` en el directorio del
código fuente:

```
$ cd pseudod-code/
$ make
```

También puedes ejecutar el instalador sin ejecutar `make`:

```
$ cd pseudod-code/
$ sudo ./instalar.sh
```

## Archivos

Es recomendable leer los siguientes archivos:

* `LEEME.txt` ([LEEME.txt](LEEME.txt)): Este archivo contiene más información
sobre PseudoD.
* `ESTRUCTURA.txt` ([ESTRUCTURA.txt](ESTRUCTURA.txt)): Este archivo explica
la estructura del directorio.
* `bepd/LEEME.txt` ([bepd/LEEME.txt](bepd/LEEME.txt)): LEEME de la BEPD.
* `test/LEEME.txt` ([test/LEEME.txt](test/LEEME.txt)): LEEME de la suite de
pruebas.

## Ejemplos

### Hola Mundo

Con la biblioteca estándar (BEPD)

```pseudod
utilizar entsal.pseudo

llamar EscribirLinea {Hola Mundo} finargs
```

Sin la biblioteca estándar (BEPD)

```pseudod
adquirir mensaje
fijar mensaje a {Hola Mundo}
escribir mensaje
nl
```

### Suma de dos numeros

Con la biblioteca estándar (BEPD)

```pseudod
utilizar mate.pseudo
utilizar entsal.pseudo

adquirir n1
adquirir n2

llamar EscribirLinea {Ingrese dos numeros enteros:} finargs

fijar n1 a llamar LeerPalabra finargs
fijar n2 a llamar LeerPalabra finargs

llamar Imprimir
	n1
	{+}
	n2
	{=}
	llamar Sumar
		n1
		n2
	finargs
finargs
```

Sin la biblioteca estándar (BEPD)

```pseudod
adquirir n1
adquirir n2
adquirir res
adquirir msg

fijar msg a {Ingrese dos numeros enteros:}
escribir msg
nl

leer n1
leer n2
Importar.Ent.Sumar n1 n2 res

fijar msg a { + }
escribir n1
escribir msg
escribir n2

fijar msg a { = }
escribir msg
escribir res
nl
```

## Ayuda

* [pseudod.sourceforge.net](http://pseudod.sourceforge.net)

