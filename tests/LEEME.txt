ESTE ARCHIVO CONTIENE TEXTO UNICODE

   ____                     _       ____
  |  _ \ ___  ___ _   _  __| | ___ |  _ \
  | |_) / __|/ _ \ | | |/ _` |/ _ \| | | |
  |  __/\__ \  __/ |_| | (_| | (_) | |_| |
  |_|   |___/\___|\__,_|\__,_|\___/|____/

Copyright 2016 Alejandro Linarez Rangel

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=============================================================================

Ver README.mkd para una introducción

=============================================================================

Bienvenido al sistema de pruebas de PseudoD, donde están las pruebas de cada
característica del lenguaje, a continuación podrás ver como crear, editar
y ejecutar las pruebas.

                      Ejecutando una prueba

Para ejecutar todas las pruebas en PseudoD, debes estar dentro del directorio
de pruebas, es decir: si estas en el directorio principal de PseudoD es
necesario ejecutar:

```sh
cd tests/
./runtests.sh
```

El archivo `runtests.sh` ejecutará todas las pruebas e indicará cuales falláron
y cuales no. Si desea personalizar la salida o configurar el programa, puede
ver todas las opciones que acepta con `./runtests.sh --help`.

                     Estructura de una prueba

Donde "./" es el directorio de la prueba:
	salida.txt                  Salida de la prueba.
	test.pd                     Prueba en PseudoD.
	entrada.txt                 Entrada de la prueba.
	fmt.txt                     Formato de los archivos de entrada/salida.
	espr.txt                    Salida esperada de la prueba.
	diff.txt                    Salida 'diff' entre 'espr.txt' y
	                           'salida.txt'.

                       Creando una prueba

1. Como primer paso, se debe crear una carpeta en el directorio actual que
posea de nombre, el nombre de la prueba.
2. Se deben crear los archivos especificados dentro del directorio.
3. Se debe llenar esos archivos con los formatos especificados.
4. Ejecutar la prueba como es dicho más abajo.

                      Formato de los archivos

'prueba.txt'
	Un archivo de texto con una descripción de la prueba. Cuando se ejecute una
	prueba, todo el contenido de la primera línea del archivo será mostrado,
	así que intenta que esta parte sea muy descriptiva. Por ejemplo:

		Prueba que el sistema de condicionales funcione correctamente.

		... una descripción más completa ...
'salida.txt'
	Debe contener la salida sin modificar de la prueba, debe seguir el
	formato de 'fmt.txt'.
'test.pd'
	Debe contener el código fuente de la prueba, comentado y debe cumplir
	los requisitos básicos de código fuente(ver más abajo).
'entrada.txt'
	Entrada de la prueba, debe seguir el formato de 'fmt.txt'.
'fmt.txt'
	Especificación del formato de las pruebas, debe describir claramente en que
	formato y que rango de valores aceptará el programa como entrada.
'espr.txt'
	Salida esperada de la prueba, siguiendo el formato de 'fmt.txt'.
'diff.txt'
	Salida de ejecutar 'diff' entre 'salida.txt' y 'espr.txt'.

Es altamente recomendable que se utilicen los programas incluidos dentro del
directorio de la suite de pruebas (`newtest.sh` y `runtests.sh`) para crear
y ejecutar las pruebas en vez de hacerlo de forma manual.
