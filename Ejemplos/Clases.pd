[ ***************************************************
**************
** Clases.pd: Ejemplos de PseudoD.
** Creador: Alejandro Linarez Rangel
** Declara y utiliza una clase.
** Serie de ejemplos de PseudoD.
** Contacto a <proyectopseudod@gmail.com> y a los
** foros de discución en
**    <https://sourceforge.net/p/pseudod/discussion/?source=navbar>
**************
Copyright 2016 Alejandro Linarez Rangel

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*************************************************** ]
utilizar inic.pseudo
utilizar clases.pseudo
utilizar tipos.pseudo

[ FIXME: Este ejemplo esta obsoleto a favor de PseudoD 2.2.0,
por favor, no utilice más este ejemplo con fines didacticos ]

[ Igual al struct div_t de C, pero con la siguiente estructura:
Un atributo res(Resto).
Un atributo coc(cociente).
Un metodo div(Divide)
de esta forma se declara como:
]
clase Div
	res
	coc
	:div
#(Final).
heredar Objeto Div [ Objeto <- Div ]

funcion Div#div [ Declaramos el metodo div de Div ]
	[ Uso: Div#div a b, actualiza la instancia actual a a/b ]
	[ Los parametros en PseudoD se reciben con recibir_parametro en el
	orden en que se pasaron ]
	[ TODO el primer parametro es siempre la referencia a el valor this ]
	[ Se deben evitar nombres comunes (se utiliza generalmente clase_metodo_var) ]
	instancia Referencia Div_div_yo
	adquirir Div_div_dividendo
	adquirir Div_div_divisor
	adquirir Div_div_resultado
	adquirir Div_div_resultado2
	adquirir Div_div_attr
	recibir_parametro Div_div_yo#ref
	recibir_parametro Div_div_dividendo
	recibir_parametro Div_div_divisor
	[ PseudoD no ofrece el operador de resto (a%b) pero gracias a la
	ecuacion: Si a/b = c -> bc = a -> a = bc + r donde R es el resto,
	despejando obtenemos: a - r = bc -> -r = bc - a -> r = -1(bc - a)
	-> r = -bc + a. Para esto necesitamos el resultado de la division. ]
	Importar.Ent.Dividir Div_div_dividendo Div_div_divisor Div_div_resultado
	fijar Div_div_attr =* coc
	llamar Div_div_yo#fijarAttr Div_div_attr Div_div_resultado #(Final).
	Importar.Ent.Restar CERO Div_div_divisor Div_div_divisor
	Importar.Ent.Multiplicar Div_div_divisor Div_div_resultado Div_div_resultado2
	Importar.Ent.Sumar Div_div_resultado2 Div_div_dividendo Div_div_resultado
	fijar Div_div_attr =* res
	llamar Div_div_yo#fijarAttr Div_div_attr Div_div_resultado #(Final).
	liberar Div_div_yo
	liberar Div_div_dividendo
	liberar Div_div_divisor
	liberar Div_div_resultado
	liberar Div_div_resultado2
	liberar Div_div_attr
finfun

instancia Div mi_division
adquirir a
adquirir b
fijar a =* 29
fijar b =* 5
[ 29/5 ]
llamar mi_division#div a b #(Final).
escribir mi_division#res
nl
escribir mi_division#coc
nl
