[ ***************************************************
**************
** ObjetosGenericos.pd: Prueba de los objetos genericos.
** Creador: Alejandro Linarez Rangel
** Prueba la versión en PseudoD del "Duck Typing".
** Y tambien algo parecido a los templates<> de C++.
** Serie de ejemplos de PseudoD.
** Contacto a <proyectopseudod@gmail.com> y a los
** foros de discución en
**    <https://sourceforge.net/p/pseudod/discussion/?source=navbar>
**************
Copyright 2016 Alejandro Linarez Rangel

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*************************************************** ]

utilizar tipos.pseudo

[ El duck typing puede realizarse de dos formas: ]
[ 1. Utilizar interfaces: ]

[ La intefaz Quackable representa cualquier cosa que pueda hacer "Quack" ]
clase IQuackable
	:quack
finclase
heredar Objeto IQuackable

clase Pato
	:quack
finclase
heredar IQuackable Pato

funcion Pato#quack
	adquirir mensaje
	fijar mensaje =* Quack!Quack!Quack!
	escribir mensaje
	nl
	liberar mensaje
finfun

clase Persona
	:quack
finclase
heredar IQuackable Persona

funcion Persona#quack
	adquirir mensaje
	fijar mensaje =* Imito el sonido de un pato, quack!quack!quack!
	escribir mensaje
	nl
	liberar mensaje
finfun

funcion EnElBosque
	adquirir objeto
	recibir_parametro objeto
	llamar <objeto>#quack finargs
	liberar objeto
finfun

instancia Pato pato
instancia Persona persona
llamar EnElBosque pato#NOMBRE finargs
llamar EnElBosque persona#NOMBRE finargs

[ 2. Utilizar punteros/referencias opacos ]

instancia Referencia quackable
adquirir metodo
fijar metodo =* quack
fijar quackable#ref =¿? pato#NOMBRE
[ Si el objeto al que apunta quackable no posee el metodo ]
[ :quack, lanzara un error ]
llamar quackable#llamarMet metodo #(Final).
fijar quackable#ref =¿? persona#NOMBRE
llamar quackable#llamarMet metodo #(Final).

[ El segundo método es el utilizado por las funciones ]
[ para manejar objetos por referencia ]
